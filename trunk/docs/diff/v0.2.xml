<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Tue Nov 28 12:09:10 CET 2006 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="v0.2"
  jdversion="1.0.10">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath D:\installs\jdiff\lib\jdiff.jar;D:\installs\jdiff\lib\xerces.jar -d D:\Perso\abc4j\docs\diff -classpath D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-antlr.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-apache-bcel.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-apache-bsf.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-apache-log4j.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-apache-oro.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-apache-regexp.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-apache-resolver.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-commons-logging.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-commons-net.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-icontract.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-jai.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-javamail.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-jdepend.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-jmf.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-jsch.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-junit.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-launcher.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-netrexx.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-nodeps.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-starteam.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-stylebook.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-swing.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-trax.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-vaj.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-weblogic.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-xalan1.jar;D:\eclipse\plugins\org.apache.ant_1.6.5\lib\ant-xslp.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\10\1\.cp\lib\remoteAnt.jar;C:\j2sdk1.4.2_06\lib\tools.jar;D:\eclipse\plugins\org.eclipse.swt.win32.win32.x86_3.2.1.v3235.jar -sourcepath D:\Perso\abc4j\src -apiname v0.2 -baseURI http://www.w3.org -apidir D:\Perso\abc4j\docs\diff -->
<package name="abc.midi">
  <!-- start class abc.midi.BasicMidiConverter -->
  <class name="BasicMidiConverter" extends="abc.midi.MidiConverterAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BasicMidiConverter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNoteOneMessageFor" return="javax.sound.midi.MidiMessage[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
    </method>
    <method name="getNoteOffMessageFor" return="javax.sound.midi.MidiMessage[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
    </method>
    <method name="getMidiEventFor" return="javax.sound.midi.MidiMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tempo" type="abc.notation.Tempo"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
    </method>
    <doc>
    <![CDATA[A basic midi converter that just plays melody, ignores ornaments and chords.]]>
    </doc>
  </class>
  <!-- end class abc.midi.BasicMidiConverter -->
  <!-- start class abc.midi.BasicPositionableMidiConverter -->
  <class name="BasicPositionableMidiConverter" extends="abc.midi.BasicMidiConverter"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BasicPositionableMidiConverter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="playNote"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <param name="indexInScore" type="int"/>
      <param name="currentKey" type="abc.notation.KeySignature"/>
      <param name="reference" type="long"/>
      <param name="duration" type="long"/>
      <param name="track" type="javax.sound.midi.Track"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
    </method>
    <method name="playMultiNote"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="multiNote" type="abc.notation.MultiNote"/>
      <param name="indexInScore" type="int"/>
      <param name="currentKey" type="abc.notation.KeySignature"/>
      <param name="reference" type="long"/>
      <param name="track" type="javax.sound.midi.Track"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
    </method>
    <doc>
    <![CDATA[A basic midi converter that just plays melody, ignores ornaments and chords.]]>
    </doc>
  </class>
  <!-- end class abc.midi.BasicPositionableMidiConverter -->
  <!-- start class abc.midi.KeySignatureMessage -->
  <class name="KeySignatureMessage" extends="javax.sound.midi.MetaMessage"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="KeySignatureMessage" type="abc.notation.KeySignature"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a midi message to change key from an ABC key.
 @param key]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[A midi message to set key signature DOES NOT WORK !!!.]]>
    </doc>
  </class>
  <!-- end class abc.midi.KeySignatureMessage -->
  <!-- start class abc.midi.MetaMessageWA -->
  <class name="MetaMessageWA" extends="javax.sound.midi.MetaMessage"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MetaMessageWA"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setMessage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="int"/>
      <param name="data" type="byte[]"/>
      <param name="length" type="int"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
    </method>
    <method name="isTempoMessage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="javax.sound.midi.MetaMessage"/>
      <doc>
      <![CDATA[Checks the first byte of the data part of the message to check 
 if it is a tempo message or not.
 @param message
 @return <TT>true</TT> if the given message is a tempo message, 
 <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="isNotationMarker" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="javax.sound.midi.MetaMessage"/>
      <doc>
      <![CDATA[Checks the first byte of the data part of the message to check 
 if it is a notation marker message or not.
 @param message
 @return <TT>true</TT> if the given message is a marker notation message, 
 <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="isNoteIndexMessage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="javax.sound.midi.MetaMessage"/>
    </method>
    <doc>
    <![CDATA[This class describes midi meta messages with an additional
 type that is expressed as the first byte of the data...
 Not the straight way to use meta message but the standard 
 way does not seem to work properly (message not detected 
 while play back)]]>
    </doc>
  </class>
  <!-- end class abc.midi.MetaMessageWA -->
  <!-- start class abc.midi.MidiConverterAbstract -->
  <class name="MidiConverterAbstract" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.midi.MidiConverterInterface"/>
    <constructor name="MidiConverterAbstract"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toMidiSequence" return="javax.sound.midi.Sequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
      <doc>
      <![CDATA[Converts the given tune to a midi sequence.
 @param tune The tune to be converted.
 @return The midi sequence of the tune.]]>
      </doc>
    </method>
    <method name="playNote"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <param name="indexInScore" type="int"/>
      <param name="currentKey" type="abc.notation.KeySignature"/>
      <param name="timeReference" type="long"/>
      <param name="duration" type="long"/>
      <param name="track" type="javax.sound.midi.Track"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
      <doc>
      <![CDATA[Generates the midi events requiered to play the given note in the context 
 described by the others parameters.
 @param note The note to be played.
 @param indexInScore The index of the note in the score.
 @param currentKey The current key this note is refering to.
 @param timeReference The time reference expressed in ticks when the note should be played.
 @param duration The duration of the note expressed in ticks.
 @param track The track where the note should be played.
 @throws InvalidMidiDataException]]>
      </doc>
    </method>
    <method name="playMultiNote"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="multiNote" type="abc.notation.MultiNote"/>
      <param name="indexInScore" type="int"/>
      <param name="currentKey" type="abc.notation.KeySignature"/>
      <param name="reference" type="long"/>
      <param name="track" type="javax.sound.midi.Track"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
    </method>
    <method name="addEventsToTrack" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="track" type="javax.sound.midi.Track"/>
      <param name="events" type="javax.sound.midi.MidiEvent[]"/>
      <doc>
      <![CDATA[@return The length of the track in ticks, once events have been added to it.]]>
      </doc>
    </method>
    <method name="getNoteOneMessageFor" return="javax.sound.midi.MidiMessage[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
    </method>
    <method name="getNoteOffMessageFor" return="javax.sound.midi.MidiMessage[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
    </method>
    <method name="getMidiEventFor" return="javax.sound.midi.MidiMessage"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tempo" type="abc.notation.Tempo"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
      <doc>
      <![CDATA[Returns the corresponding midi events for a tempo change.]]>
      </doc>
    </method>
    <method name="getNoteLengthInTicks" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <doc>
      <![CDATA[Returns the length of the note in ticks, thanks to the sequence
 resolution and the default note length.]]>
      </doc>
    </method>
    <method name="getNoteLengthInTicks" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.MultiNote"/>
      <doc>
      <![CDATA[Returns the length of the multi note in ticks.
 This length is calculated from the resolution of the midi sequence
 manipulated internally.
 @return The length of the multi note in ticks : this is equal to the length
 of the longest note of the multi note.]]>
      </doc>
    </method>
    <method name="getMidiNoteNumber" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <doc>
      <![CDATA[Returns the midi note number corresponding a note in the given key.
 @param note The note.
 @param key The key this note should refer to for accidentals.
 @return The midi height of the note in the given key.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[MidiConverter class defines various static methods to convert abc related stuff
 to midi : notes, tunes etc...]]>
    </doc>
  </class>
  <!-- end class abc.midi.MidiConverterAbstract -->
  <!-- start interface abc.midi.MidiConverterInterface -->
  <interface name="MidiConverterInterface"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="toMidiSequence" return="javax.sound.midi.Sequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
      <doc>
      <![CDATA[Returns the midi sequence corresponding to the given tune.
 @param tune A tune with a score.
 @return A midi sequence corresponding to the given tune.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface defines methods that should be implemented for any "tune to
 midi" converter.
 Improved converters could generate midi sequences depending on the type of tune
 rhythm, have nice ornaments features etc etc...]]>
    </doc>
  </interface>
  <!-- end interface abc.midi.MidiConverterInterface -->
  <!-- start interface abc.midi.MidiMessageType -->
  <interface name="MidiMessageType"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="END_OF_TRACK" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The message type for an end of a tune playback.]]>
      </doc>
    </field>
    <field name="TEMPO_CHANGE" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The message type for a tempo change.]]>
      </doc>
    </field>
    <field name="NOTATION_MARKER" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="use lEsS_tHaNTT>NOTE_INDEX_MARKERlEsS_tHaN/TT>">
      <doc>
      <![CDATA[The message type to flag which part of the abc notation
 is played during a tune playback.
 @deprecated use <TT>NOTE_INDEX_MARKER</TT>
 @see #NOTE_INDEX_MARKER]]>
      </doc>
    </field>
    <field name="NOTE_INDEX_MARKER" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The message type to give a reference to the note index in the
 score that is being played during a tune playback.]]>
      </doc>
    </field>
    <field name="MARKER" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This interface exposes the types of midi messages 
 created by the <TT>abc.midi</TT> package]]>
    </doc>
  </interface>
  <!-- end interface abc.midi.MidiMessageType -->
  <!-- start class abc.midi.NotationMarkerMessage -->
  <class name="NotationMarkerMessage" extends="abc.midi.MetaMessageWA"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NotationMarkerMessage" type="scanner.PositionableInCharStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getBeginOffset" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bytes" type="byte[]"/>
    </method>
    <method name="getEndOffset" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bytes" type="byte[]"/>
    </method>
    <doc>
    <![CDATA[A midi meta event to flag a positionable object in a midi stream.]]>
    </doc>
  </class>
  <!-- end class abc.midi.NotationMarkerMessage -->
  <!-- start class abc.midi.NoteIndexMessage -->
  <class name="NoteIndexMessage" extends="abc.midi.MetaMessageWA"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NoteIndexMessage" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bytes" type="byte[]"/>
    </method>
  </class>
  <!-- end class abc.midi.NoteIndexMessage -->
  <!-- start class abc.midi.OldBasicMidiConverter -->
  <class name="OldBasicMidiConverter" extends="abc.midi.OldMidiConverterAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OldBasicMidiConverter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getMidiEventsFor" return="javax.sound.midi.MidiEvent[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <param name="elapsedTime" type="long"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
    </method>
    <method name="getMidiEventsFor" return="javax.sound.midi.MidiEvent[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tuplet" type="abc.notation.Tuplet"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <param name="elapsedTime" type="long"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
      <doc>
      <![CDATA[Returns the corresponding midi events for a tuplet.]]>
      </doc>
    </method>
    <method name="getMidiEventsFor" return="javax.sound.midi.MidiEvent[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tempo" type="abc.notation.Tempo"/>
      <param name="lastPosInTicks" type="long"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
      <doc>
      <![CDATA[Returns the corresponding midi events for a tempo change.]]>
      </doc>
    </method>
    <method name="getMidiEventsFor" return="javax.sound.midi.MidiEvent[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="abc.notation.MultiNote"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <param name="elapsedTime" type="long"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
      <doc>
      <![CDATA[Returns the corresponding midi events for a multi note.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A basic midi converter that just plays melody, ignores ornaments and chords.]]>
    </doc>
  </class>
  <!-- end class abc.midi.OldBasicMidiConverter -->
  <!-- start class abc.midi.OldMidiConverterAbstract -->
  <class name="OldMidiConverterAbstract" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.midi.MidiConverterInterface"/>
    <constructor name="OldMidiConverterAbstract"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toMidiSequence" return="javax.sound.midi.Sequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
      <doc>
      <![CDATA[Converts the given tune to a midi sequence.
 @param tune The tune to be converted.
 @return The midi sequence of the tune.]]>
      </doc>
    </method>
    <method name="getMidiEventsFor" return="javax.sound.midi.MidiEvent[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <param name="lastPosInTicks" type="long"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
      <doc>
      <![CDATA[Returns the corresponding midi events for a note.]]>
      </doc>
    </method>
    <method name="getMidiEventsFor" return="javax.sound.midi.MidiEvent[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tuplet" type="abc.notation.Tuplet"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <param name="lastPosInTicks" type="long"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
      <doc>
      <![CDATA[Returns the corresponding midi events for a tuplet.]]>
      </doc>
    </method>
    <method name="getMidiEventsFor" return="javax.sound.midi.MidiEvent[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tempo" type="abc.notation.Tempo"/>
      <param name="lastPosInTicks" type="long"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
      <doc>
      <![CDATA[Returns the corresponding midi events for a tempo change.]]>
      </doc>
    </method>
    <method name="getMidiEventsFor" return="javax.sound.midi.MidiEvent[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="abc.notation.MultiNote"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <param name="lastPosInTicks" type="long"/>
      <exception name="InvalidMidiDataException" type="javax.sound.midi.InvalidMidiDataException"/>
      <doc>
      <![CDATA[Returns the corresponding midi events for a multi note.]]>
      </doc>
    </method>
    <method name="getNoteLengthInTicks" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <doc>
      <![CDATA[Returns the absolute note length of a note, thanks to the sequence
 resolution and the default note length.]]>
      </doc>
    </method>
    <method name="getNoteLengthInTicks" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.MultiNote"/>
      <doc>
      <![CDATA[Returns the length of the multi note in ticks.
 This length is calculated from the resolution of the midi sequence
 manipulated internally.
 @return The length of the multi note in ticks : this is equal to the length
 of the longest note of the multi note.]]>
      </doc>
    </method>
    <method name="getMidiNoteNumber" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.Note"/>
      <param name="key" type="abc.notation.KeySignature"/>
      <doc>
      <![CDATA[Returns the midi note number corresponding a note in the given key.
 @param note The note.
 @param key The key.
 @return The midi heigth of the note in the given key.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[MidiConverter class defines various static methods to convert abc related stuff
 to midi : notes, tunes etc...]]>
    </doc>
  </class>
  <!-- end class abc.midi.OldMidiConverterAbstract -->
  <!-- start class abc.midi.PlayerStateChangeEvent -->
  <class name="PlayerStateChangeEvent" extends="java.util.EventObject"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlayerStateChangeEvent" type="java.lang.Object, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isPlayerPlaying" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.midi.PlayerStateChangeEvent -->
  <!-- start class abc.midi.TempoChangeEvent -->
  <class name="TempoChangeEvent" extends="java.util.EventObject"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TempoChangeEvent" type="java.lang.Object, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNewTempoValue" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.midi.TempoChangeEvent -->
  <!-- start class abc.midi.TempoMessage -->
  <class name="TempoMessage" extends="javax.sound.midi.MetaMessage"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TempoMessage" type="abc.notation.Tempo"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a midi message to change tempo to the specified tempo.
 @param tempo A tempo coming from an abc notation.]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[A midi message to set tempo.]]>
    </doc>
  </class>
  <!-- end class abc.midi.TempoMessage -->
  <!-- start class abc.midi.TempoMessageWA -->
  <class name="TempoMessageWA" extends="abc.midi.MetaMessageWA"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TempoMessageWA"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.midi.TempoMessageWA -->
  <!-- start class abc.midi.TimeSignatureMessage -->
  <class name="TimeSignatureMessage" extends="javax.sound.midi.MetaMessage"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TimeSignatureMessage" type="abc.notation.TimeSignature"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a midi message to change time signature from an ABC time
 signature.
 @param meter]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[A midi message to set time signature DOES NOT WORK !!!!.]]>
    </doc>
  </class>
  <!-- end class abc.midi.TimeSignatureMessage -->
  <!-- start class abc.midi.TunePlayer -->
  <class name="TunePlayer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="javax.sound.midi.MetaEventListener"/>
    <constructor name="TunePlayer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a tune player with default midi converter.
 @see BasicMidiConverter]]>
      </doc>
    </constructor>
    <constructor name="TunePlayer" type="abc.midi.MidiConverterInterface"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a tune player with the specified midi converter.]]>
      </doc>
    </constructor>
    <method name="addListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="abc.midi.TunePlayerListenerInterface"/>
      <doc>
      <![CDATA[Adds a listener to this tune player.
 @param listener The listener to be added to this tune player.]]>
      </doc>
    </method>
    <method name="removeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="abc.midi.TunePlayerListenerInterface"/>
      <doc>
      <![CDATA[Removes a listener from this tune player.
 @param listener The listener to be removed from this tune player.]]>
      </doc>
    </method>
    <method name="setTempo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tempo" type="int"/>
      <doc>
      <![CDATA[Sets the tempo used to play the tune. N.B: This is real time tempo change :
 the tempo will change even if a tune is playing.
 @param tempo the tempo used to play the tune.]]>
      </doc>
    </method>
    <method name="getTempo" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the tempo currently used to play tunes.
 @return The tempo currently used to play tunes.]]>
      </doc>
    </method>
    <method name="getTune" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The tune that is currently played,]]>
      </doc>
    </method>
    <method name="play"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
      <exception name="IllegalStateException" type="java.lang.IllegalStateException"/>
      <doc>
      <![CDATA[Plays the given tune.
 @param tune The tune to be played.
 @exception IllegalStateException Thrown if the player hasn't been started
 before.]]>
      </doc>
    </method>
    <method name="isPlaying" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <TT>true</TT> if this player is currently playing a tune.
 @return <TT>true</TT> if this player is currently playing a tune, <TT>false</TT>
 otheriwse.]]>
      </doc>
    </method>
    <method name="meta"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="meta" type="javax.sound.midi.MetaMessage"/>
    </method>
    <method name="start"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Starts the player so that it can play tunes.
  (Retrieves the default sequencer during this phasis).]]>
      </doc>
    </method>
    <method name="stopPlaying"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Stops the playing of the current tune if any.]]>
      </doc>
    </method>
    <method name="stop"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Stops this player.]]>
      </doc>
    </method>
    <method name="notifyForTempoChange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="newTempoValue" type="int"/>
    </method>
    <method name="notifyForPartPlayedChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="begin" type="int"/>
      <param name="end" type="int"/>
    </method>
    <method name="notifyNotePlayedChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.NoteAbstract"/>
    </method>
    <method name="notifyForPlayBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="notifyForPlayEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[TunePlayer objects enable you to play tunes using default MIDI sequencer.]]>
    </doc>
  </class>
  <!-- end class abc.midi.TunePlayer -->
  <!-- start class abc.midi.TunePlayerAdapter -->
  <class name="TunePlayerAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.midi.TunePlayerListenerInterface"/>
    <constructor name="TunePlayerAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="playBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.PlayerStateChangeEvent"/>
      <doc>
      <![CDATA[Invoked when the playing of a tune has started.]]>
      </doc>
    </method>
    <method name="playEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.PlayerStateChangeEvent"/>
      <doc>
      <![CDATA[Invoked when the playing of a tune is ended.]]>
      </doc>
    </method>
    <method name="tempoChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.TempoChangeEvent"/>
      <doc>
      <![CDATA[Invoked when the playing tempo has changed.]]>
      </doc>
    </method>
    <method name="partPlayed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="begin" type="int"/>
      <param name="end" type="int"/>
      <doc>
      <![CDATA[Invoked when a part of the tune notation is played.]]>
      </doc>
    </method>
    <method name="notePlayed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.NoteAbstract"/>
    </method>
    <doc>
    <![CDATA[A convenient class to listen to TunePlayer. This listener does nothing. Just
 extend from it to override your behaviours.]]>
    </doc>
  </class>
  <!-- end class abc.midi.TunePlayerAdapter -->
  <!-- start interface abc.midi.TunePlayerListenerInterface -->
  <interface name="TunePlayerListenerInterface"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.EventListener"/>
    <method name="playBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.PlayerStateChangeEvent"/>
      <doc>
      <![CDATA[Invoked when the playing of a tune has started.]]>
      </doc>
    </method>
    <method name="playEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.PlayerStateChangeEvent"/>
      <doc>
      <![CDATA[Invoked when the playing of a tune is ended.]]>
      </doc>
    </method>
    <method name="tempoChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.TempoChangeEvent"/>
      <doc>
      <![CDATA[Invoked when the playing tempo has changed.]]>
      </doc>
    </method>
    <method name="partPlayed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use notePlayed() instead.">
      <param name="begin" type="int"/>
      <param name="end" type="int"/>
      <doc>
      <![CDATA[Invoked when a part of the tune notation is played.
 @deprecated use notePlayed() instead.]]>
      </doc>
    </method>
    <method name="notePlayed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.NoteAbstract"/>
    </method>
    <doc>
    <![CDATA[This interface defines methods that should be implemented by any object that
 wants to listen to a tune player.]]>
    </doc>
  </interface>
  <!-- end interface abc.midi.TunePlayerListenerInterface -->
</package>
<package name="abc.notation">
  <!-- start interface abc.notation.AccidentalType -->
  <interface name="AccidentalType"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="FLAT" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>FLAT</TT> accidental type : b.]]>
      </doc>
    </field>
    <field name="NATURAL" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>NATURAL</TT> accidental type.]]>
      </doc>
    </field>
    <field name="SHARP" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>SHARP</TT> accidental type : #]]>
      </doc>
    </field>
    <field name="NONE" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>NONE</TT> accidental type.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants for accidental types.]]>
    </doc>
  </interface>
  <!-- end interface abc.notation.AccidentalType -->
  <!-- start class abc.notation.BarLine -->
  <class name="BarLine" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.notation.ScoreElementInterface"/>
    <constructor name="BarLine"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default constructor.
 Constructs a simple bar line.]]>
      </doc>
    </constructor>
    <constructor name="BarLine" type="byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new bar line with the corresponding type.
 @param type The type of bar line to be created : <TT>SIMPLE</TT>,
 <TT>REPEAT_OPEN</TT> or <TT>REPEAT_CLOSE</TT>.]]>
      </doc>
    </constructor>
    <method name="getType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of this bar line.
 @return The type of this bar line.]]>
      </doc>
    </method>
    <method name="convertToBarLine" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="barLine" type="java.lang.String"/>
      <doc>
      <![CDATA[Converts the specified string to a bar line type.
 @param barLine The string to be converted as a bar line.
 Possible values are <TT>|</TT>, <TT>||</TT>, <TT>[|</TT>,
 <TT>|]</TT>, <TT>:|</TT>, <TT>|:</TT>, <TT>::</TT>.
 @return The bar line type corresponding to the given string.
 <TT>null</TT> is returned if no type matches the string.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string representation of this object.
 @return A string representation of this object.]]>
      </doc>
    </method>
    <field name="SIMPLE" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The simple bar line type. Ex: |]]>
      </doc>
    </field>
    <field name="REPEAT_OPEN" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The repeat open bar line type. Ex: |:]]>
      </doc>
    </field>
    <field name="REPEAT_CLOSE" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The repeat close bar line type. Ex: :|]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class defines bar lines used in musical scores.]]>
    </doc>
  </class>
  <!-- end class abc.notation.BarLine -->
  <!-- start class abc.notation.Elemskip -->
  <class name="Elemskip" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.notation.ScoreElementInterface"/>
    <constructor name="Elemskip" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.notation.Elemskip -->
  <!-- start class abc.notation.Fraction -->
  <class name="Fraction" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Fraction" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IllegalArgumentException" type="java.lang.IllegalArgumentException"/>
      <doc>
      <![CDATA[Creates a new fraction with the specified numerator and denominator values.
 @param numeratorValue The value of the numerator.
 @param denominatorValue The value of the denominator.
 @exception IllegalArgumentException Thrown if the denominator is equal
 to 0.]]>
      </doc>
    </constructor>
    <method name="setNumerator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numeratorValue" type="int"/>
      <doc>
      <![CDATA[Sets the numerator of this fraction.
 @param numeratorValue The numerator of this fraction.]]>
      </doc>
    </method>
    <method name="getNumerator" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the numerator of this fraction.
 @return The numerator value of this fraction.]]>
      </doc>
    </method>
    <method name="setDenominator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="denominatorValue" type="int"/>
      <exception name="IllegalArgumentException" type="java.lang.IllegalArgumentException"/>
      <doc>
      <![CDATA[@param denominatorValue The denominator of this fraction.
 @exception IllegalArgumentException Thrown if the denominator is equal
 to 0.]]>
      </doc>
    </method>
    <method name="getDenominator" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="floatValue" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the float value represented by this fraction
 @return The fload value represented by this fraction.]]>
      </doc>
    </method>
    <method name="multipliedBy" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fraction" type="abc.notation.Fraction"/>
      <doc>
      <![CDATA[Multiplies this fraction by the specified fraction and returns
 the result as a float. This fraction remains unchanged.
 @param fraction A Fraction.
 @return The result of the multiplication of this fraction by the specified
 one.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a String representation of this fraction.
 @return a String representation of this fraction.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class enables the representation of a fraction.]]>
    </doc>
  </class>
  <!-- end class abc.notation.Fraction -->
  <!-- start class abc.notation.KeySignature -->
  <class name="KeySignature" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.notation.ScoreElementInterface"/>
    <constructor name="KeySignature" type="byte, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new signature with the specified parameters.
 @param keyNoteType The note of the mode. Possible values are
 <TT>Note.A</TT>, <TT>Note.B</TT>, <TT>Note.C</TT>, <TT>Note.D</TT>,
 <TT>Note.E</TT>, <TT>Note.F</TT> or <TT>Note.G</TT>.
 @param modeType The type of the mode. Possible values are
 <TT>AEOLIAN</TT>, <TT>DORIAN</TT>, <TT>IONIAN</TT>, <TT>LOCRIAN</TT>, <TT>LYDIAN</TT>
 <TT>MAJOR</TT>, <TT>MINOR</TT>, <TT>MIXOLYDIAN</TT>, <TT>PHRYGIAN</TT> or <TT>OTHER</TT>.]]>
      </doc>
    </constructor>
    <constructor name="KeySignature" type="byte, byte, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new signature with the specified parameters.
 @param keyNoteType The note of the mode. Possible values are
 <TT>Note.A</TT>, <TT>Note.B</TT>, <TT>Note.C</TT>, <TT>Note.D</TT>,
 <TT>Note.E</TT>, <TT>Note.F</TT> or <TT>Note.G</TT>.
 @param keyAccidental Accidental for the note mode. Possible values are
 <TT>AccidentalType.SHARP</TT>, <TT>AccidentalType.NATURAL</TT>?
 <TT>AccidentalType.NONE</TT>, or <TT>AccidentalType.FLAT</TT>.
 @param modeType The type of the mode. Possible values are
 <TT>AEOLIAN</TT>, <TT>DORIAN</TT>, <TT>IONIAN</TT>, <TT>LOCRIAN</TT>,
 <TT>LYDIAN</TT>, <TT>MAJOR</TT>, <TT>MINOR</TT>, <TT>MIXOLYDIAN</TT>,
 <TT>PHRYGIAN</TT> or <TT>OTHER</TT>.
 @exception IllegalArgumentException Thrown if keyAccidental or modeType
 are out of the allowed values.]]>
      </doc>
    </constructor>
    <constructor name="KeySignature" type="byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a key signature with the specified accidentals.
 @param accidentalsDefinition Accidental definition from note
 C to B. Possible values for accidentals are :
 <TT>AccidentalType.SHARP</TT>, <TT>AccidentalType.NATURAL</TT>
 or <TT>AccidentalType.FLAT</TT>.]]>
      </doc>
    </constructor>
    <method name="getNote" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the note of the mode.
 @return The note of the mode. Possible values are
 <TT>Note.A</TT>, <TT>Note.B</TT>, <TT>Note.C</TT>, <TT>Note.D</TT>,
 <TT>Note.E</TT>, <TT>Note.F</TT> or <TT>Note.G</TT>.]]>
      </doc>
    </method>
    <method name="getMode" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the mode of this key.
 @return The mode of this key. Possible values are <TT>AEOLIAN</TT>,
 <TT>DORIAN</TT>, <TT>IONIAN</TT>, <TT>LOCRIAN</TT>, <TT>LYDIAN</TT>,
 <TT>MAJOR</TT>, <TT>MINOR</TT>, <TT>MIXOLYDIAN</TT>, <TT>PHRYGIAN</TT>
 or <TT>OTHER</TT>.]]>
      </doc>
    </method>
    <method name="getAccidental" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns key accidental for this Key.
 @return This key's key accidental. Ex: for "Ab aeolian", the key
 accidental is "b" (flat)]]>
      </doc>
    </method>
    <method name="getAccidentals" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns accidentals of this key signature.
 @return accidentals of this key signature]]>
      </doc>
    </method>
    <method name="setAccidental"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="noteHeigth" type="byte"/>
      <param name="accidental" type="byte"/>
      <exception name="IllegalArgumentException" type="java.lang.IllegalArgumentException"/>
      <doc>
      <![CDATA[Sets the accidental for the specified note.
 @param noteHeigth The note heigth. Possible values are,
 <TT>Note.A</TT>, <TT>Note.B</TT>, <TT>Note.C</TT>, <TT>Note.D</TT>,
 <TT>Note.E</TT>, <TT>Note.F</TT> or <TT>Note.G</TT>.
 @param accidental The accidental to be set to the note. Possible values are :
 <TT>AccidentalType.SHARP</TT>, <TT>AccidentalType.NATURAL</TT>
 or <TT>AccidentalType.FLAT</TT>.
 @exception IllegalArgumentException Thrown if an invalid note heigth or
 accidental has been given.]]>
      </doc>
    </method>
    <method name="getAccidentalFor" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="noteHeigth" type="byte"/>
      <doc>
      <![CDATA[Returns accidental for the specified note heigth for this key.
 @param noteHeigth A note heigth among <TT>Note.C</TT>, <TT>Note.D</TT>,
 <TT>Note.E</TT>, <TT>Note.F</TT>, <TT>Note.G</TT>, <TT>Note.A</TT>,
 <TT>Note.B</TT>.
 @return Accidental value for the specified note heigth. This value can be
 <TT>NATURAL</TT>, <TT>FLAT</TT> or <TT>SHARP</TT>.
 @exception IllegalArgumentException Thrown if the specified note heigth
 is invalid.]]>
      </doc>
    </method>
    <method name="toLitteralNotation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="convertToModeType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mode" type="java.lang.String"/>
    </method>
    <method name="convertToAccidentalType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accidental" type="java.lang.String"/>
      <exception name="IllegalArgumentException" type="java.lang.IllegalArgumentException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a String representation of this key.
 @return A String representation of this key.]]>
      </doc>
    </method>
    <field name="AEOLIAN" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The aeolian mode type.]]>
      </doc>
    </field>
    <field name="DORIAN" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The dorian mode type.]]>
      </doc>
    </field>
    <field name="IONIAN" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The ionian mode type.]]>
      </doc>
    </field>
    <field name="LOCRIAN" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The locrian mode type.]]>
      </doc>
    </field>
    <field name="LYDIAN" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The lydian mode type.]]>
      </doc>
    </field>
    <field name="MAJOR" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The major mode type.]]>
      </doc>
    </field>
    <field name="MINOR" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The minor mode type.]]>
      </doc>
    </field>
    <field name="MIXOLYDIAN" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The mixolydian mode type.]]>
      </doc>
    </field>
    <field name="PHRYGIAN" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The phrygian mode type.]]>
      </doc>
    </field>
    <field name="OTHER" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The "not standard" mode type.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class defines key signatures using modes definition like E major, G minor etc etc...
 <PRE>
                           1   2   3   4   5   6   7
 Major (Ionian, mode 1)    D   E   F#  G   A   B   C#
 Dorian (mode 2)               E   F#  G   A   B   C#   D
 Mixolydian (mode 5)                       A   B   C#   D   E   F#  G
 Aeolian (mode 6)                              B   C#   D   E   F#  G   A
 </PRE>
 If we consider the key namned "Ab aeolian", "A" is called the note of this
 key, "b" is called the key accidental and "aeolian" is called the mode.]]>
    </doc>
  </class>
  <!-- end class abc.notation.KeySignature -->
  <!-- start class abc.notation.MultiNote -->
  <class name="MultiNote" extends="abc.notation.NoteAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultiNote" type="java.util.Vector"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new <TT>MultiNote</TT> from given notes.
 @param notes A Vector containing the <TT>NoteAbstract</TT> of this
 <TT>MultiNote</TT>.]]>
      </doc>
    </constructor>
    <method name="getLongestNote" return="abc.notation.Note"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the longest note of this multi note.
 @return The longest note of this multi note. If several notes have the
 same longest length, the first one is returned.]]>
      </doc>
    </method>
    <method name="getNotesAsVector" return="java.util.Vector"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new vector containing all <TT>Note</TT> objects contained in
 this multi note.
 @return a new vector containing all <TT>Note</TT> objects contained in
 this multi note.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A multi note is a group of notes that should be played together.]]>
    </doc>
  </class>
  <!-- end class abc.notation.MultiNote -->
  <!-- start class abc.notation.MultiPartsDefinition -->
  <class name="MultiPartsDefinition" extends="abc.notation.RepeatedPartAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultiPartsDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new multi part definition.]]>
      </doc>
    </constructor>
    <method name="addPart"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="p" type="abc.notation.RepeatedPartAbstract"/>
      <doc>
      <![CDATA[Adds a new part to this multi part.
 @param p The part that has to be added to the multi part. This part can
 be a simple <TT>Part</TT> or another </TT>MultiPart</TT> (composite
 definition).]]>
      </doc>
    </method>
    <method name="toPartsArray" return="abc.notation.Part[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this multipart as an array of singles parts. The playing of the
 multi part would sound the same as the playing of the array of parts.
 @return An array of singles parts that would sound the same as the
 playing of this multipart.]]>
      </doc>
    </method>
    <method name="getPartsAsRepeatedOnceVector" return="java.util.Vector"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This class describes the way a multipart score is defined.]]>
    </doc>
  </class>
  <!-- end class abc.notation.MultiPartsDefinition -->
  <!-- start class abc.notation.NoSuchTuneException -->
  <class name="NoSuchTuneException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NoSuchTuneException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This exception is thrown when a requested tune hasn't been found.]]>
    </doc>
  </class>
  <!-- end class abc.notation.NoSuchTuneException -->
  <!-- start class abc.notation.Note -->
  <class name="Note" extends="abc.notation.NoteAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Note" type="byte, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an abc note with the specified heigth and accidental.
 @param heigthValue The heigth of the note.
 @param accidentalValue The accidental of the note.]]>
      </doc>
    </constructor>
    <constructor name="Note" type="byte, byte, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an abc note with the specified heigth, accidental and octave
 transposition.
 @param heigthValue
 @param accidentalValue]]>
      </doc>
    </constructor>
    <method name="setHeigth"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use setHeight(byte heigthValue) instead. sorry for the typo...">
      <param name="heigthValue" type="byte"/>
      <doc>
      <![CDATA[Sets the heigth of this note.
 @param heigthValue The heigth of this note. The heigth is <TT>REST</TT> if
 this note is a rest.
 @deprecated use setHeight(byte heigthValue) instead. sorry for the typo... 
 @see #setHeight(byte)]]>
      </doc>
    </method>
    <method name="setHeight"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="heigthValue" type="byte"/>
      <doc>
      <![CDATA[Sets the heigth of this note.
 @param heigthValue The heigth of this note. The heigth is <TT>REST</TT> if
 this note is a rest.]]>
      </doc>
    </method>
    <method name="getHeigth" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use getHeight() instead. Sorry for the typo....">
      <doc>
      <![CDATA[Returns this note absolute height. This height doesn't take in account
 octave transposition.
 @return This note height. <TT>REST</TT> is returned if this note is a rest.
 Possible other values are <TT>C</TT>, <TT>D</TT>, <TT>E</TT>, <TT>F</TT>, <TT>G</TT>,
 <TT>A</TT>, <TT>B</TT>, <TT>c</TT>, <TT>d</TT>, <TT>e</TT>, <TT>f</TT>, <TT>g</TT>,
 <TT>a</TT> or <TT>b</TT>. 
 @deprecated use getHeight() instead. Sorry for the typo.... 
 @see #getHeight()]]>
      </doc>
    </method>
    <method name="getHeight" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this note absolute height. This height doesn't take in account
 octave transposition.
 @return This note height. <TT>REST</TT> is returned if this note is a rest.
 Possible other values are <TT>C</TT>, <TT>D</TT>, <TT>E</TT>, <TT>F</TT>, <TT>G</TT>,
 <TT>A</TT>, <TT>B</TT>, <TT>c</TT>, <TT>d</TT>, <TT>e</TT>, <TT>f</TT>, <TT>g</TT>,
 <TT>a</TT> or <TT>b</TT>.]]>
      </doc>
    </method>
    <method name="toRootOctaveHeigth" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the heigth of this note on the first octave.
 @return the heigth of this note on the first octave. Possible values are
 <TT>C</TT>, <TT>D</TT>, <TT>E</TT>, <TT>F</TT>, <TT>G</TT>, <TT>A</TT>(404)
 or <TT>B</TT>.]]>
      </doc>
    </method>
    <method name="setOctaveTransposition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="octaveTranspositionValue" type="byte"/>
      <doc>
      <![CDATA[Sets the octave transposition for this note.
 @param octaveTranspositionValue The octave transposition for this note :
 1, 2 or 3 means "1, 2 or 3 octave(s) higher than the reference octave" and
 -1, -2 or -3 means "1, 2 or 3 octave(s) less than the reference octave".]]>
      </doc>
    </method>
    <method name="getOctaveTransposition" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the octave transposition for this note.
 @return The octave transposition for this note. Default is 0.]]>
      </doc>
    </method>
    <method name="setLength"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use setDuration(short duration) instead.">
      <param name="length" type="short"/>
      <doc>
      <![CDATA[Sets the length of this note. 
 @deprecated use setDuration(short duration) instead.
 @param length The length of this note as a value adjusted to 
 the scale of constants such as <TT>Note.WHOLE</TT>, <TT>Note.HALF</TT> etc etc ... 
 @see #setDuration(short)]]>
      </doc>
    </method>
    <method name="setDuration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="duration" type="short"/>
      <doc>
      <![CDATA[Sets the length of this note. However, it is recommanded to represent
 the note duration using methods such as setStrictDuration(short strictDuration), 
 setDotted(byte dotted) etc etc as explained at the begining of this class description.
 @param duration The length of this note as a value adjusted to 
 the scale of constants such as <TT>Note.WHOLE</TT>, <TT>Note.HALF</TT> etc etc ... 
 @see #getDuration()]]>
      </doc>
    </method>
    <method name="setStrictDuration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="strictDuration" type="short"/>
      <exception name="IllegalArgumentException" type="java.lang.IllegalArgumentException"/>
      <doc>
      <![CDATA[Sets the strict duration of this note.
 @param strictDuration This note strict duration. Possible values are ONLY 
 <TT>Note.WHOLE</TT>, <TT>Note.HALF</TT>,
 <TT>Note.QUARTER</TT>, <TT>Note.EIGHTH</TT>, <TT>Note.SIXTEENTH</TT>, 
 <TT>Note.THIRTY_SECOND</TT>, <TT>Note.SIXTY_FOURTH</TT>.
 @exception IllegalArgumentException Thrown if the given duration does not 
 match the excepted ones.]]>
      </doc>
    </method>
    <method name="getStrictDuration" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the strict duration of this note. 
 @return The strict duration of this note. The dot, tuplet whatever... 
 are taken NOT into account for the duration returned by this function.
 The possible returned values are :
 <TT>Note.WHOLE</TT>, <TT>Note.HALF</TT>,
 <TT>Note.QUARTER</TT>, <TT>Note.EIGHTH</TT>, <TT>Note.SIXTEENTH</TT>, 
 <TT>Note.THIRTY_SECOND</TT>, <TT>Note.SIXTY_FOURTH</TT> or -1 if this
 note duration is not expressed using (strict duration + dots + tuplet)
 but with an exotic duration (that can be retrieved using getDuration()
 in that case).
 @see #getDuration()]]>
      </doc>
    </method>
    <method name="getDuration" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the duration of this note. The duration returned here takes into 
 account if the note is dotted, part of a tuplet and so on ... (as opposed
 to <TT>getStrictDuration()</TT> that only refers to the "pure" note) 
 @return The duration of this note as a value adjusted to 
 the scale of constants such as <TT>Note.WHOLE</TT>, <TT>Note.HALF</TT> etc etc ...
 @see #setLength(short)
 @see #getStrictDuration()]]>
      </doc>
    </method>
    <method name="setAccidental"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accidentalValue" type="byte"/>
      <doc>
      <![CDATA[Sets the accidental for this note.
 @param accidentalValue Accidental for this note. Possible values are
 <TT>NATURAL</TT>, <TT>SHARP</TT> (#) or <TT>FLAT</TT> (b).]]>
      </doc>
    </method>
    <method name="getAccidental" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns accidental for this note if any.
 @return Accidental for this note if any. Possible values are
 <TT>NATURAL</TT>, <TT>FLAT</TT> or <TT>SHARP</TT>.
 @see #setAccidental(byte)]]>
      </doc>
    </method>
    <method name="setIsTied"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isTied" type="boolean"/>
      <doc>
      <![CDATA[Sets if this note is tied, wheter or not.
 @param isTied <TT>true</TT> if this note is tied, <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="isTied" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <TT>true</TT> if this note is tied.
 @return <TT>true</TT> if this note is tied, <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="isRest" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <TT>true</TT> if this note is a rest
 @return <TT>true</TT> if this note is a rest, <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="setDotted"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dotted" type="byte"/>
    </method>
    <method name="convertToNoteType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="java.lang.String"/>
    </method>
    <method name="convertToNoteLengthStrict" return="short"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="num" type="int"/>
      <param name="denom" type="int"/>
      <exception name="IllegalArgumentException" type="java.lang.IllegalArgumentException"/>
    </method>
    <method name="convertToAccidentalType" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accidental" type="java.lang.String"/>
      <exception name="IllegalArgumentException" type="java.lang.IllegalArgumentException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isStrictDuration" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="noteDuration" type="short"/>
      <doc>
      <![CDATA[Returns <TT>true</TT> if the duration of the note is one of the 
 following : <TT>Note.WHOLE</TT>, <TT>Note.HALF</TT>,
 <TT>Note.QUARTER</TT>, <TT>Note.EIGHTH</TT>, <TT>Note.SIXTEENTH</TT>, 
 <TT>Note.THIRTY_SECOND</TT>, <TT>Note.SIXTY_FOURTH</TT>.
 @param noteDuration The note duration to be checked
 @return <TT>true</TT> if the duration of the note is one of the 
 following : <TT>Note.WHOLE</TT>, <TT>Note.HALF</TT>,
 <TT>Note.QUARTER</TT>, <TT>Note.EIGHTH</TT>, <TT>Note.SIXTEENTH</TT>, 
 <TT>Note.THIRTY_SECOND</TT>, <TT>Note.SIXTY_FOURTH</TT>.
 <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <field name="C" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>C</TT> note height type.]]>
      </doc>
    </field>
    <field name="D" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>D</TT> note height type.]]>
      </doc>
    </field>
    <field name="E" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>E</TT> note height type.]]>
      </doc>
    </field>
    <field name="F" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>F</TT> note height type.]]>
      </doc>
    </field>
    <field name="G" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>G</TT> note height type.]]>
      </doc>
    </field>
    <field name="A" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>A</TT> note height type : A440]]>
      </doc>
    </field>
    <field name="B" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>B</TT> note height type.]]>
      </doc>
    </field>
    <field name="c" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>c</TT> note height type.]]>
      </doc>
    </field>
    <field name="d" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>d</TT> note height type.]]>
      </doc>
    </field>
    <field name="e" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>e</TT> note height type.]]>
      </doc>
    </field>
    <field name="f" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>f</TT> note height type.]]>
      </doc>
    </field>
    <field name="g" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>g</TT> note height type.]]>
      </doc>
    </field>
    <field name="a" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>a</TT> note height type.]]>
      </doc>
    </field>
    <field name="b" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>b</TT> note height type.]]>
      </doc>
    </field>
    <field name="REST" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>REST</TT> height type.]]>
      </doc>
    </field>
    <field name="DOTTED_WHOLE" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>DOTTED_WHOLE</TT> length type.]]>
      </doc>
    </field>
    <field name="WHOLE" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>WHOLE</TT> length type. <IMG src="../../images/whole.jpg"/>]]>
      </doc>
    </field>
    <field name="DOTTED_HALF" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>DOTTED_HALF</TT> length type.]]>
      </doc>
    </field>
    <field name="HALF" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>HALF</TT> length type. <IMG src="../../images/half.jpg"/>]]>
      </doc>
    </field>
    <field name="DOTTED_QUARTER" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>DOTTED_QUARTER</TT> length type.]]>
      </doc>
    </field>
    <field name="QUARTER" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>QUARTER</TT> length type. <IMG src="../../images/quarter.jpg"/>]]>
      </doc>
    </field>
    <field name="DOTTED_EIGHTH" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>DOTTED_EIGHTH</TT> length type.]]>
      </doc>
    </field>
    <field name="EIGHTH" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>EIGHTH</TT> length type. <IMG src="../../images/eighth.jpg"/>]]>
      </doc>
    </field>
    <field name="DOTTED_SIXTEENTH" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>DOTTED_SIXTEENTH</TT> length type.]]>
      </doc>
    </field>
    <field name="SIXTEENTH" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>SIXTEENTH</TT> length type. <IMG src="../../images/sixteenth.jpg"/>]]>
      </doc>
    </field>
    <field name="DOTTED_THIRTY_SECOND" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>DOTTED_THIRTY_SECOND</TT> length type.]]>
      </doc>
    </field>
    <field name="THIRTY_SECOND" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>THIRTY_SECOND</TT> length type. <IMG src="../../images/thirtySecond.jpg"/>]]>
      </doc>
    </field>
    <field name="DOTTED_SIXTY_FOURTH" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>DOTTED_SIXTY_FOURTH</TT> length type.]]>
      </doc>
    </field>
    <field name="SIXTY_FOURTH" type="short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>SIXTY_FOURTH</TT> length type.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class defines a (single) Note : height, rhythm, part of tuplet, rest etc...
 There can be some tricky representation of a duration for a note.
 For instance :<BR/>
 <B>Tuplets</B><BR/>
 <IMG src="../../images/tuplets.gif"/><BR/>
 The first tuplet describes 3 quarter notes in the time of 2. So in that case, 
 the representation of each note of tuplet as a <TT>Note</TT> object is :
 <UL>
 <LI><TT>getStrictDuration()</TT> returns <TT>Note.QUARTER</TT></LI>
 <LI><TT>isPartOfTuplet()</TT> returns <TT>true</TT></LI>
 <LI><TT>getTuplet()</TT> returns a <TT>Tuplet</TT> instance that enacapsulates
 the three instances of notes that are part of the tuplet.</LI>
 </UL>
 The same applies to the second tuplet except that the strict duration of the
 notes composing the tuplet is <TT>Note.EIGHTH</TT>. Same for the third tuplet
 with a strict duration equals to <TT>Note.SIXTEENTH</TT>.
 <B>Dots</B><BR/>
 <IMG src="../../images/multiDots.jpg"/><BR/>
 When a note is dotted, its strict duration remains unchanged. The only difference
 between a non-dotted note and a dotted one can be retrieved from the method 
 <TT>countDots()</TT> that returns the number of dots for a given <TT>Note</TT> instance.
 So in the example above :
 <UL>
 <LI>For the first example</LI>
 		<UL>
 			<LI><TT>getStrictDuration()</TT> returns <TT>Note.WHOLE</TT></LI>
 			<LI><TT>countDots()</TT> returns <TT>2</TT></LI>
		</UL>
 <LI>For the second example</LI>
 		<UL>
 			<LI><TT>getStrictDuration()</TT> returns <TT>Note.HALF</TT></LI>
 			<LI><TT>countDots()</TT> returns <TT>2</TT></LI>
		</UL>
 <LI>For the third example</LI>
 		<UL>
 			<LI><TT>getStrictDuration()</TT> returns <TT>Note.HALF</TT></LI>
 			<LI><TT>countDots()</TT> returns <TT>3</TT></LI>
		</UL>
 </UL>]]>
    </doc>
  </class>
  <!-- end class abc.notation.Note -->
  <!-- start class abc.notation.NoteAbstract -->
  <class name="NoteAbstract" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.notation.ScoreElementInterface"/>
    <constructor name="NoteAbstract"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setChordName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="chordName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the name of the chord.
 @param chordName The name of the chord, ex: Gm6.]]>
      </doc>
    </method>
    <method name="getChordName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the chord.
 @return The name of the chord, <TT>null</TT> if no chord has been set.]]>
      </doc>
    </method>
    <method name="getBow" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the bow to be used when playing this note.
 @return The bow to be used when playing this note.
 @see #setBow(byte)]]>
      </doc>
    </method>
    <method name="setBow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bowValue" type="byte"/>
      <doc>
      <![CDATA[Sets the bow to be used when playing this note.
 @param bowValue The bow to be used when playing this note. Possible values
 are <TT>NONE</TT> (the default value when not specified), <TT>UP</TT> or
 </TT>DOWN</TT>.]]>
      </doc>
    </method>
    <method name="getGracingNotes" return="abc.notation.Note[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the gracing notes to be played with this note.
 @return The gracing notes to be played with this note. <TT>null</TT> if
 this note has no gracing notes.
 @see #hasGracingNotes()]]>
      </doc>
    </method>
    <method name="setGracingNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="abc.notation.Note[]"/>
    </method>
    <method name="hasGracingNotes" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <TT>true</TT> if this note has gracings, <TT>false</TT> otherwise.
 @return <TT>true</TT> if this note has gracings, <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="setDotted"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dotsNumber" type="byte"/>
      <doc>
      <![CDATA[Sets the number of dots for this note. 
 @param dotsNumber The number of dots for this note.]]>
      </doc>
    </method>
    <method name="getDotted" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="replaced by countDots()">
      <doc>
      <![CDATA[Returns the dotted value of this note.
 @return The dotted value of this note. Default is 0.
 @deprecated replaced by countDots() 
 @see #countDots()]]>
      </doc>
    </method>
    <method name="countDots" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of dots for this note.
 @return The number of dots for this note. Default is 0.]]>
      </doc>
    </method>
    <method name="hasGeneralGracing" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <TT>true</TT> if this note has a general gracing, <TT>false</TT> otherwise.
 @return <TT>true</TT> if this note has a general gracing, <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="setGeneralGracing"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="hasGeneralGracing" type="boolean"/>
      <doc>
      <![CDATA[Specifies if this note should be played with a general gracing or not.
 @param hasGeneralGracing <TT>true</TT> if this note should be played with
 a general gracing, <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="hasStaccato" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <TT>true</TT> if this note should be played with staccato.
 @return <TT>true</TT> if this note should be played with staccato,
 <TT>false</TT> otherwise. 
 @see #setStaccato(boolean)]]>
      </doc>
    </method>
    <method name="setStaccato"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="staccatoValue" type="boolean"/>
      <doc>
      <![CDATA[Sets the staccato playing style of this note.
 @param staccatoValue <TT>true</TT> if this note should be played with staccato,
 <TT>false</TT> otherwise.
 @see #hasStaccato()]]>
      </doc>
    </method>
    <method name="isPartOfSlur" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <TT>true</TT> if this Note is part of a slur.
 @return <TT>true</TT> if this Note is part of a slur, <TT>false</TT>
 otherwise.]]>
      </doc>
    </method>
    <method name="isPartOfTuplet" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return <TT>true</TT> if this note is part of a tuplet.
 @return <TT>true</TT> if this note is part of a tuplet, <TT>false</TT>
 otherwise.]]>
      </doc>
    </method>
    <method name="getTuplet" return="abc.notation.Tuplet"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the tuplet this note is part of.
 @return The tuplet this note is part of. <TT>null</TT> is returned if
 this note isn't part of a tuplet.
 @see #isPartOfTuplet()]]>
      </doc>
    </method>
    <method name="setPartOfSlur"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isPartOfSlur" type="boolean"/>
      <doc>
      <![CDATA[Sets if this note is part of a slur or not.
 @param isPartOfSlur <TT>true</TT> if this note is part of a slur,
 <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="getGracingNotesLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="defaultNoteLength" type="short"/>
      <doc>
      <![CDATA[Needs to be reworked !!]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a String representation of this Object.
 @return a String representation of this Object.]]>
      </doc>
    </method>
    <field name="NONE" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The none bow type.]]>
      </doc>
    </field>
    <field name="DOWN" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The down bow type.]]>
      </doc>
    </field>
    <field name="UP" type="byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The up bow type.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This is the abstract class to define notes or multi notes.]]>
    </doc>
  </class>
  <!-- end class abc.notation.NoteAbstract -->
  <!-- start class abc.notation.Part -->
  <class name="Part" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="setLabel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="labelValue" type="char"/>
      <doc>
      <![CDATA[Sets the label that identifies this part.
 @param labelValue The label that identifies this part.]]>
      </doc>
    </method>
    <method name="getLabel" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the label that identifies this part.
 @return The label that identifies this part.]]>
      </doc>
    </method>
    <method name="getScore" return="abc.notation.Tune.Score"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the score associated to this part.
 @return The score associated to this part.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<TT>Part</TT> objects are used to define parts in tunes.]]>
    </doc>
  </class>
  <!-- end class abc.notation.Part -->
  <!-- start class abc.notation.RepeatBarLine -->
  <class name="RepeatBarLine" extends="abc.notation.BarLine"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.notation.ScoreElementInterface"/>
    <constructor name="RepeatBarLine" type="byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new repeat bar line.
 @param repeatsNumber The number of times the repeat should occur.]]>
      </doc>
    </constructor>
    <method name="getRepeatNumber" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of times the repeat should occur.
 @return the number of times the repeat should occur.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string representation of this repeat barline.
 @return A string representation of this repeat barline.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A special bar line that enables you to repeat part of the score.]]>
    </doc>
  </class>
  <!-- end class abc.notation.RepeatBarLine -->
  <!-- start class abc.notation.RepeatedPart -->
  <class name="RepeatedPart" extends="abc.notation.RepeatedPartAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RepeatedPart" type="abc.notation.Part"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new repeated part that will repeat the given part.
 @param part A part of a tune.]]>
      </doc>
    </constructor>
    <method name="toPartsArray" return="abc.notation.Part[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A simple <TT>Part</TT> repeated several times.]]>
    </doc>
  </class>
  <!-- end class abc.notation.RepeatedPart -->
  <!-- start class abc.notation.RepeatedPartAbstract -->
  <class name="RepeatedPartAbstract" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RepeatedPartAbstract"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new repeated part. By default this part is repeated
 only once.]]>
      </doc>
    </constructor>
    <method name="getNumberOfRepeats" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of times this part should be repeated.
 @return The number of times this part should be repeated.]]>
      </doc>
    </method>
    <method name="setNumberOfRepeats"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="repeatNumber" type="int"/>
      <doc>
      <![CDATA[Sets the number of times this part should be repeated.
 @param repeatNumber The number of times this part should be repeated.]]>
      </doc>
    </method>
    <method name="toPartsArray" return="abc.notation.Part[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this repeated part as an array of singles parts. The playing of
 this repeated part would sound the same as the playing of the array of parts.
 @return An array of singles parts that would sound the same as the
 playing of this repeated part.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract class that defines the number of times a part in the score should
 be repeated.]]>
    </doc>
  </class>
  <!-- end class abc.notation.RepeatedPartAbstract -->
  <!-- start interface abc.notation.ScoreElementInterface -->
  <interface name="ScoreElementInterface"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[A tagging interface for all elements composing the score of a tune.]]>
    </doc>
  </interface>
  <!-- end interface abc.notation.ScoreElementInterface -->
  <!-- start interface abc.notation.ScorePresentationElementInterface -->
  <interface name="ScorePresentationElementInterface"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[A tagging interface for all elements composing the score of a tune that are
 releated to score presentation for rendition.]]>
    </doc>
  </interface>
  <!-- end interface abc.notation.ScorePresentationElementInterface -->
  <!-- start class abc.notation.Tempo -->
  <class name="Tempo" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.notation.ScoreElementInterface"/>
    <constructor name="Tempo" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a tempo object with the specified tempo value and quarter as
 length reference.
 @param notesNbPerMinute The number of quarter notes per minutes.]]>
      </doc>
    </constructor>
    <constructor name="Tempo" type="short, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a tempo object with the specified tempo value and the specified
 length reference.
 @param referenceLength The reference length.
 @param value The number of reference lengths per minutes.]]>
      </doc>
    </constructor>
    <method name="getReference" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the reference length used to express this tempo.
 @return The reference length used to express this tempo. Possible
 values are <TT>Note.SIXTY_FOURTH</TT>, <TT>Note.THIRTY_SECOND</TT> ...
 or <TT>Note.WHOLE</TT>.]]>
      </doc>
    </method>
    <method name="getNotesNumberPerMinute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of note per minutes considering that those notes' length
 is the reference length.
 @return the number of note per minutes considering that those notes' length
 is the reference length.]]>
      </doc>
    </method>
    <method name="getNotesNumberPerMinute" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="refLength" type="short"/>
      <doc>
      <![CDATA[Returns the tempo for the given length as reference.
 @param refLength The note length in which this tempo should be expressed.
 @return The number of notes of the specified length per minutes.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The tempo class enables you to define tempo values from a reference note
 length.]]>
    </doc>
  </class>
  <!-- end class abc.notation.Tempo -->
  <!-- start class abc.notation.TimeSignature -->
  <class name="TimeSignature" extends="abc.notation.Fraction"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.notation.ScoreElementInterface"/>
    <constructor name="TimeSignature" type="int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new time signature with the specified parameters.
 @param num The number of beat in a bar.
 @param den The type of those beats.]]>
      </doc>
    </constructor>
    <method name="getDefaultNoteLength" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the default note length for this time signature.
 @return The default note length for this time signature.
 The default note length is equals to <TT>Note.SIXTEENTH</TT> when the
 time signature decimal conversion value is strictly less than 0.75.
 If it's higher, the default is <TT>Note.EIGHTH</TT>.]]>
      </doc>
    </method>
    <method name="isCoumpound" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return <TT>true</TT> if this time signature if compound, <TT>false</TT>
 otherwise.
 @return <TT>true</TT> if this time signature if compound, <TT>false</TT>
 otherwise. Compound time signatures are 3/4, 3/8, 9/8 etc... simple time
 signatures are C, 4/4, 2/4 etc...]]>
      </doc>
    </method>
    <method name="getNumberOfDefaultNotesPerBeat" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="defaultLength" type="short"/>
    </method>
    <doc>
    <![CDATA[This class enables you to describe any time signatures like 4/4, 6/8 ...]]>
    </doc>
  </class>
  <!-- end class abc.notation.TimeSignature -->
  <!-- start class abc.notation.Tune -->
  <class name="Tune" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Tune"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new empty tune.]]>
      </doc>
    </constructor>
    <method name="setArea"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="area" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the geographic area where this tune comes from.
 Corresponds to the "A:" abc field.
 Ex: A:Donegal, A:Bampton
 @param area The area where this tune comes from.]]>
      </doc>
    </method>
    <method name="getArea" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the area where this tune comes from.
 @return The area where this tune comes from.
 <TT>null</TT> if the area hasn't been specified.]]>
      </doc>
    </method>
    <method name="setBook"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="book" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the list of publications where
 this tune can be found.
 Corresponds to the "B:" abc field.
 Ex: B:O'Neills
 @param book The book where this tune comes from.]]>
      </doc>
    </method>
    <method name="getBook" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of publications where this
 tune can be found.
 @return Returns the list of publications where
 this tune can be found,
 <TT>null</TT> if the book hasn't been specified.]]>
      </doc>
    </method>
    <method name="setComposer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="composer" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the composer of this tune.
 Corresponds to the "C:" abc field.
 Ex: C:Paddy Fahey
 @param composer The composer who wrotes this tune.
 For tunes known as traditional, you can use "traditional"
 as parameter so that that people don't think the composer
 has just been ignored.]]>
      </doc>
    </method>
    <method name="getComposer" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the composer of this tune.
 @return The composer of this tune,
 <TT>null</TT> if the composer hasn't been specified.]]>
      </doc>
    </method>
    <method name="setDiscography"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="discography" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets recordings where this tune appears.
 Corresponds to the "D:" abc field.
 Ex: D:Gwenojenn
 @param discography Recordings where this tune appears.]]>
      </doc>
    </method>
    <method name="getDiscography" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns recordings where this tune appears.
 @return recordings where this tune appears,
 <TT>null</TT> if the discography hasn't been specified.]]>
      </doc>
    </method>
    <method name="setElemskip"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
    </method>
    <method name="getElemskip" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setGroup"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="getGroup" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="addHistory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="history" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds historical information about the tune.
 Corresponds to the "H:" abc field.
 Ex: H:Composed in 1930
 @param history Historical information about
 the tune to be added.]]>
      </doc>
    </method>
    <method name="getHistory" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns historical information about the tune.
 @return Historical information about the tune,
 <TT>null</TT> if no historical information about
 the tune is provided.]]>
      </doc>
    </method>
    <method name="getKey" return="abc.notation.KeySignature"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the key signature of this tune.
 @return The key signature of this tune.]]>
      </doc>
    </method>
    <method name="setInformation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="information" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets additional information about the tune.
 @param information Additional information about the tune.]]>
      </doc>
    </method>
    <method name="getInformation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns additional information about the tune.
 @return Additional information about the tune,
 <TT>null</TT> if no additional information about
 the tune is provided.]]>
      </doc>
    </method>
    <method name="setNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notes" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets notes concerning the transcription of this tune.
 Corresponds to the "N:" abc field.
 Ex: N:see also O'Neills - 234
 @param notes Notes concerning the transcription of this tune.]]>
      </doc>
    </method>
    <method name="getNotes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns notes concerning the transcription of this tune.
 @return Notes concerning the transcription of this tune,
 <TT>null</TT> if no transcription notes about
 the tune is provided.]]>
      </doc>
    </method>
    <method name="setOrigin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="origin" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the origin of this tune.
 Corresponds to the "O:" abc field.
 Ex: O:Irish, O:English
 @param origin Origin of this tune : place or a person
 that the music came from. N.B: For a person, setSource
 is probably better.
 @see #setSource(java.lang.String)]]>
      </doc>
    </method>
    <method name="getOrigin" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the origin of this tune.
 @return The origin of this tune.
 <TT>null</TT> if no origin about
 the tune is provided.]]>
      </doc>
    </method>
    <method name="getPart" return="abc.notation.Part"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="partLabel" type="char"/>
      <doc>
      <![CDATA[Returns the part of the tune identified by the given label.
 @param partLabel A part label.
 @return The part of the tune identified by the given label, <TT>null</TT>
 if no part with the specified label exists in this tune.]]>
      </doc>
    </method>
    <method name="createPart" return="abc.notation.Part"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="partLabel" type="char"/>
      <doc>
      <![CDATA[Creates a new part in this tune and returns it.
 @param partLabel The label defining this new tune part.
 @return The new part properly labeled.]]>
      </doc>
    </method>
    <method name="setMultiPartsDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="multiPartsDef" type="abc.notation.MultiPartsDefinition"/>
      <doc>
      <![CDATA[Sets the multi parts definition of this tune.
 @param multiPartsDef The multi parts definition of this tune : defines
 how parts should be played.]]>
      </doc>
    </method>
    <method name="getMultiPartsDefinition" return="abc.notation.MultiPartsDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the multi parts definition of this tune.
 @return The multi parts definition of this tune. <TT>null</TT> is returned
 if this tuned isn't composed of several parts.]]>
      </doc>
    </method>
    <method name="setRhythm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rhythm" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the rhythm of this tune.
 Corresponds to the "R:" abc field.
 Ex: R:hornpipe
 @param rhythm Type of rhythm of this tune.
 @see #getRhythm()]]>
      </doc>
    </method>
    <method name="getRhythm" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the rhythm of this tune.
 @return The rhythm of this tune,
 <TT>null</TT> if no rhythm about
 the tune is provided.
 @see #setRhythm(java.lang.String)]]>
      </doc>
    </method>
    <method name="setSource"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the source of this tune.
 Corresponds to the "S:" abc field.
 Ex: S:collected in Brittany
 @param source The source of this tune (place where
 it has been collected for ex).]]>
      </doc>
    </method>
    <method name="getSource" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the source of this tune.
 @return The source of this tune. <TT>null</TT> if no source is provided.]]>
      </doc>
    </method>
    <method name="addTitle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="title" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds a title to this tune.
 Corresponds to the "T:" abc field.
 Ex: T:Dansaone
 @param title A title for this tune.]]>
      </doc>
    </method>
    <method name="removeTitle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="title" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes one the titles of this tune.
 @param title The title to be removed of this tune.]]>
      </doc>
    </method>
    <method name="getTitles" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the titles of this tune.
 @return An array containing the titles of this tune. If this tune has no
 title, <TT>null</TT> is returned.]]>
      </doc>
    </method>
    <method name="setReferenceNumber"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="int"/>
      <doc>
      <![CDATA[Sets the reference number of this tune.
 @param id The reference number of this tune.]]>
      </doc>
    </method>
    <method name="getReferenceNumber" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the reference number of this tune.
 @return The reference number of this tune.]]>
      </doc>
    </method>
    <method name="addTranscriptionNotes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transciptionNotes" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds notes about transcription of this tune.
 Corresponds to the "Z:" abc field.
 Ex: Z:collected in Brittany
 @param transciptionNotes notes about about who did the ABC
 transcription : email addresses and URLs are appropriate here,
 and other contact information such as phone numbers or postal
 addresses may be included.]]>
      </doc>
    </method>
    <method name="getTranscriptionNotes" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns transcription notes of this tune.
 @return Transcription notes of this tune.]]>
      </doc>
    </method>
    <method name="getScore" return="abc.notation.Tune.Score"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the score of this tune.
 @return The score of this tune. If this tune isn't composed of several parts
 this method returns the "normal" score. If this tune is composed of several
 parts the returned is generated so that the tune looks like a "single-part"
 one. If you want to retrieve the score related to each part separatly just
 do <TT>getPart(char partLabel).getScore()</TT>.
 @see #getPart(char)]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string representation of this tune.
 @return A string representation of this tune.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class encapsulates all information retrieved from a tune transcribed
 using abc notation : header and music.]]>
    </doc>
  </class>
  <!-- end class abc.notation.Tune -->
  <!-- start class abc.notation.Tune.Score -->
  <class name="Tune.Score" extends="java.util.Vector"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Tune.Score"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="addElement"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="abc.notation.KeySignature"/>
    </method>
  </class>
  <!-- end class abc.notation.Tune.Score -->
  <!-- start class abc.notation.Tuplet -->
  <class name="Tuplet" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Tuplet" type="java.util.Vector, int, short"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new tuplet composed of the specified notes. The total length
 of this tuplet will be equals to the totalRelativeLength * defaultLength.
 @param notes The <TT>NoteAbstract</TT> obejcts composing this tuplet,
 encapsulated inside a <TT>Vector</TT>.
 @param totalRelativeLength The total relative length of this tuplet
 multiplied by the delfault relative length gives the total absolute length
 of this tuplet.]]>
      </doc>
    </constructor>
    <method name="getTotalRelativeLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="use totalDuration() instead. Reference to relative length should
 be avoided in the API bacause this is only related to the quote_cHaRabc worldquote_cHaR.">
      <doc>
      <![CDATA[Returns the total relative length of this tuplet.
 @return The total relative length of this tuplet. The total relative length
 of this tuplet multiplied by the default relative length gives the total
 absolute length of this tuplet.
 @deprecated use totalDuration() instead. Reference to relative length should
 be avoided in the API bacause this is only related to the "abc world". 
 @see #getTotalDuration()]]>
      </doc>
    </method>
    <method name="getTotalDuration" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the total duration of this tuplet.
 @return The total duration of this tuplet.]]>
      </doc>
    </method>
    <method name="getNotesAsVector" return="java.util.Vector"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new vector containing all notes of this multi note.
 @return A new vector containing all notes of this multi note.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A class to define tuplets in a score.]]>
    </doc>
  </class>
  <!-- end class abc.notation.Tuplet -->
  <!-- start class abc.notation.Words -->
  <class name="Words" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.notation.ScoreElementInterface"/>
    <constructor name="Words" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new word element.
 @param theContent The words to be included in the score.]]>
      </doc>
    </constructor>
    <method name="getContent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content of this words element.
 @return The content of this words element.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A class to describe words (lyrics) in a score.]]>
    </doc>
  </class>
  <!-- end class abc.notation.Words -->
</package>
<package name="abc.parser">
  <!-- start class abc.parser.AbcFileParser -->
  <class name="AbcFileParser" extends="abc.parser.AbcParserAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbcFileParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new abc file parser.]]>
      </doc>
    </constructor>
    <method name="addListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="abc.parser.AbcFileParserListenerInterface"/>
      <doc>
      <![CDATA[Adds a listener to catch events thrwon by the parser durin tune parsing.
 @param listener Object that implements the TuneParserListenerInterface.
 @see #removeListener(abc.parser.AbcFileParserListenerInterface)]]>
      </doc>
    </method>
    <method name="removeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="abc.parser.AbcFileParserListenerInterface"/>
      <doc>
      <![CDATA[Removes a listener from this parser.
 @param listener The listener to be removed.
 @see #addListener(abc.parser.AbcFileParserListenerInterface)]]>
      </doc>
    </method>
    <method name="parseFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="abcFile" type="java.io.File"/>
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <doc>
      <![CDATA[Parses the specified file.
 @param abcFile The file to be parsed.
 @exception FileNotFoundException Thrown if the specified file isn't found.]]>
      </doc>
    </method>
    <method name="notifyListenersForFileBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Notifies listeners that the parsing of the file has begun.]]>
      </doc>
    </method>
    <method name="notifyListenersForFileEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Notifies listeners that the parsing of the file is ended.]]>
      </doc>
    </method>
    <method name="notifyListenersForLineProcessed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="line" type="java.lang.String"/>
      <doc>
      <![CDATA[Notifies listeners that a line has been processed.
 @param line The line that has been processed.]]>
      </doc>
    </method>
    <method name="parseFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="abcCharStream" type="java.io.Reader"/>
      <doc>
      <![CDATA[Parses the specified stream in abc notation.
 @param abcCharStream The abc stream to be parsed.]]>
      </doc>
    </method>
    <method name="parseFileHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="abcFile" type="java.io.File"/>
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <doc>
      <![CDATA[Parses only tunes header of the the specified file.
 @deprecated
 @param abcFile A text file using ABC notation.
 @exception FileNotFoundException Thrown if the specified file isn't found.]]>
      </doc>
    </method>
    <method name="parseFileHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="charStream" type="java.io.BufferedReader"/>
      <doc>
      <![CDATA[@deprecated]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class provides instances to parse files and streams using
 abc notation.
 Parser instances from this class will parse the whole content 
 of the input files / streams (headers + music). If you are only 
 interested in getting tune headers, you'd better use the AbcHeadersParser
 that will restrict the parsing to abc headers. Such parsing is 
 faster than parsing the whole content of the file (about 10x from 
 what I've been able to measure...).
 @see AbcHeadersParser]]>
    </doc>
  </class>
  <!-- end class abc.parser.AbcFileParser -->
  <!-- start class abc.parser.AbcFileParserAdapter -->
  <class name="AbcFileParserAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.parser.AbcFileParserListenerInterface"/>
    <constructor name="AbcFileParserAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="tuneBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Invoked when the parser reaches the beginning of a tune.]]>
      </doc>
    </method>
    <method name="invalidToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="abc.parser.InvalidTokenEvent"/>
      <doc>
      <![CDATA[Invoked when an invalid token has been parsed.
 @param evt An event describing the invalid token.]]>
      </doc>
    </method>
    <method name="validToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="scanner.TokenEvent"/>
      <doc>
      <![CDATA[Invoked when a valid token has been parsed.
 @param evt An event describing the valid token.]]>
      </doc>
    </method>
    <method name="invalidCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="scanner.InvalidCharacterEvent"/>
      <doc>
      <![CDATA[Invoked when an invalid character has been parsed.
 @param evt An event describing the invalid character.]]>
      </doc>
    </method>
    <method name="tuneEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
      <doc>
      <![CDATA[Invoked when the parser reaches the end of a tune.
 @param tune The tune that has just been parsed.]]>
      </doc>
    </method>
    <method name="fileBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Invoked when the parsing of the file begins.]]>
      </doc>
    </method>
    <method name="fileEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Invoked when the parsing of the file end.]]>
      </doc>
    </method>
    <method name="lineProcessed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="line" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[A default implementation of a file parser listener that does nothing.]]>
    </doc>
  </class>
  <!-- end class abc.parser.AbcFileParserAdapter -->
  <!-- start interface abc.parser.AbcFileParserListenerInterface -->
  <interface name="AbcFileParserListenerInterface"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.parser.TuneParserListenerInterface"/>
    <method name="fileBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Invoked when the parsing of the file begins.]]>
      </doc>
    </method>
    <method name="lineProcessed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="line" type="java.lang.String"/>
      <doc>
      <![CDATA[Invoked when a line has been processed.
 @param line The line that has just been processed.]]>
      </doc>
    </method>
    <method name="fileEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Invoked when the parsing of the file end.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The interface to be implemented when parsing abc files.]]>
    </doc>
  </interface>
  <!-- end interface abc.parser.AbcFileParserListenerInterface -->
  <!-- start class abc.parser.AbcHeadersParser -->
  <class name="AbcHeadersParser" extends="abc.parser.AbcFileParser"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbcHeadersParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default constructor.]]>
      </doc>
    </constructor>
    <method name="parseAbcLine"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="follow" type="scanner.Set"/>
      <doc>
      <![CDATA[abc-line ::= (1*element line-ender) / mid-tune-field / tex-command]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class provides parser instances that reduce the parsing 
 scope to tunes headers (music is excluded). This results in a much 
 faster parsing than parsing the whole tunes and enables you to 
 build up tunes indexes fastly.<BR/>
 Just invoke the usual methods #parseFile(File abcFile) or 
 #parseFile(Reader abcCharStream) and you'll get in return instances of 
 Tune without any Score part.]]>
    </doc>
  </class>
  <!-- end class abc.parser.AbcHeadersParser -->
  <!-- start class abc.parser.AbcParserAbstract -->
  <class name="AbcParserAbstract" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbcParserAbstract"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new tune parser.]]>
      </doc>
    </constructor>
    <method name="getScanner" return="scanner.Scanner"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the scanner internally used for parsing.
 @return The scanner internally used for parsing.]]>
      </doc>
    </method>
    <method name="addListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="abc.parser.TuneParserListenerInterface"/>
      <doc>
      <![CDATA[Adds a listener to catch events thrown by the parser durin tune parsing.
 @param listener Object that implements the TuneParserListenerInterface.]]>
      </doc>
    </method>
    <method name="removeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="abc.parser.TuneParserListenerInterface"/>
      <doc>
      <![CDATA[Removes a listener from this parser.
 @param listener The listener to be removed.]]>
      </doc>
    </method>
    <method name="parse" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="tune" type="java.lang.String"/>
      <doc>
      <![CDATA[Parse the given string and creates a <TT>Tune</TT> object as parsing result.
 @param tune The abc tune, as a String, to be parsed.
 @return An object representation of the abc notation string.]]>
      </doc>
    </method>
    <method name="parse" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="charStream" type="java.io.Reader"/>
      <doc>
      <![CDATA[Parses the specified stream in ABC notation.
 @param charStream Tune stream in ABC notation.
 @return A tune representing the ABC notation stream.]]>
      </doc>
    </method>
    <method name="parseHeader" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="tune" type="java.lang.String"/>
      <doc>
      <![CDATA[Parses the header of the specified tune notation.
 @param tune A tune notation in ABC.
 @return A tune representing the ABC notation with header values only.]]>
      </doc>
    </method>
    <method name="parseHeader" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="charStream" type="java.io.Reader"/>
      <doc>
      <![CDATA[Parse the given string and creates a <TT>Tune</TT> object with no score
 as parsing result. This purpose of this method method is to provide a
 faster parsing when just abc header fields are needed.
 @param charStream The stream to be parsed.
 @return An object representation with no score of the abc notation
 string.]]>
      </doc>
    </method>
    <method name="parseAbcFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="follow" type="scanner.Set"/>
      <doc>
      <![CDATA[abc-file ::= *(abc-tune / comment / linefeed / tex-command / file-fields)]]>
      </doc>
    </method>
    <method name="initParsing" return="scanner.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Inits the parsing : sets the starting state of the current Set +
 sets the finale state automata of the scanner + retrieves the first 
 token and its type.
 @return The starting state of the current Set as it should
 be at the begining of the parsing.]]>
      </doc>
    </method>
    <method name="parseAbcTune" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="follow" type="scanner.Set"/>
      <doc>
      <![CDATA[abc-tune ::= abc-header abc-music]]>
      </doc>
    </method>
    <method name="parseAbcHeader" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="follow" type="scanner.Set"/>
      <doc>
      <![CDATA[abc-header ::= field-number *comment 1*field-title *other-fields field-key
 In practice, many tunes are e-mailed without field-number, 
 so those wishing to implement an abc parser should treat this ; field as optional.]]>
      </doc>
    </method>
    <method name="parseComment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="follow" type="scanner.Set"/>
      <doc>
      <![CDATA[comment ::= "%" text (linefeed / no-line-break / line-break)]]>
      </doc>
    </method>
    <method name="parseAbcMusic"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="follow" type="scanner.Set"/>
      <doc>
      <![CDATA[abc-music ::= 1*abc-line linefeed]]>
      </doc>
    </method>
    <method name="parseAbcLine"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="follow" type="scanner.Set"/>
      <doc>
      <![CDATA[abc-line ::= (1*element line-ender) / mid-tune-field / tex-command]]>
      </doc>
    </method>
    <method name="accept" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="tokenType" type="scanner.TokenType"/>
      <param name="current" type="scanner.Set"/>
      <param name="follow" type="scanner.Set"/>
    </method>
    <method name="accept" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="tokenType" type="scanner.TokenType"/>
      <param name="current" type="scanner.Set"/>
      <param name="follow" type="scanner.Set"/>
      <param name="isCurrentOptional" type="boolean"/>
    </method>
    <method name="skipTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="current" type="scanner.Set"/>
      <param name="follow" type="scanner.Set"/>
      <param name="isCurrentOptionnal" type="boolean"/>
    </method>
    <method name="notifyListenersForTuneBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="notifyListenersForTuneEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
    <method name="notifyListenersForValidToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="token" type="scanner.Token"/>
    </method>
    <method name="notifyListenersForInvalidToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="token" type="scanner.Token"/>
      <param name="position" type="scanner.CharStreamPosition"/>
      <param name="expectedTokenType" type="scanner.TokenType"/>
    </method>
    <method name="notifyListenersForInvalidCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="evt" type="scanner.InvalidCharacterEvent"/>
    </method>
    <method name="convertToRepeatBarLine" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="barLine" type="java.lang.String"/>
    </method>
    <method name="convertBrokenRhythm" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="brokenRhythm" type="java.lang.String"/>
    </method>
    <method name="convertToOctaveTransposition" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="octave" type="java.lang.String"/>
    </method>
    <field name="FIRST_END_OF_LINE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_PART_SPEC" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_PARTS" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_NOTE_LENGTH_STRICT" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_TEMPO" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_METER_FRACTION" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_METER" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_GLOBAL_ACCIDENTAL" type="scanner.Set"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_MODE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_MODE_SPEC" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_KEY_ACCIDENTAL" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_KEYNOTE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_KEYSPEC" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_KEY" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_KEY" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_TRANSCRNOTES" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_SOURCE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_RHYTHM" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_TEMPO" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_PARTS" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_ORIGIN" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_NOTES" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_METER" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_DEFAULT_LENGTH" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_INFORMATION" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_HISTORY" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_GROUP" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_DISCOGRAPHY" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_COMPOSER" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_BOOK" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_AREA" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_COMMENT" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_OTHER_FIELDS" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_TITLE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_NUMBER" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_ABCHEADER" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_TEXT_CHAR" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_TEXT" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_LINE_FEED" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_NO_LINE_BREAK" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_LINE_BREAK" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_SPACE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_USER_DEFINED" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_WORDS" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FIELD_PART" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_TUNE_FIELD" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_MID_TUNE_FIELD" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_END_SLUR" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_BEGIN_SLUR" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_NTH_REPEAT" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_BARLINE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_CHORD_TYPE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_FORMAL_CHORD" type="scanner.Set"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_GUITAR_CHORD" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_GRACE_NOTES" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_GRACINGS" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_TIE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_BROKEN_RHYTHM" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_REST" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_BASE_NOTE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_ACCIDENTAL" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_NOTE_LENGTH" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_OCTAVE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_PITCH" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_NOTE_OR_REST" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_NOTE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_MULTI_NOTE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_NOTE_STEM" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_NOTE_ELEMENT" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_TUPLET_SPEC" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_TUPLET_ELEMENT" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_LINE_ENDER" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_ELEMENT" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_ABC_LINE" type="scanner.Set"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_ABC_MUSIC" type="scanner.Set"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="FIRST_ABCTUNE" type="scanner.Set"
      transient="false" volatile="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="m_scanner" type="scanner.Scanner"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The scanner used for parsing.]]>
      </doc>
    </field>
    <field name="m_automata" type="scanner.FinaleStateAutomata"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="m_scannerListener" type="scanner.ScannerListenerInterface"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <field name="m_listeners" type="java.util.Vector"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Listeners of this parser.]]>
      </doc>
    </field>
    <field name="m_token" type="scanner.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[the current token used by this parser.]]>
      </doc>
    </field>
    <field name="m_tokenType" type="scanner.TokenType"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The type of the current token 
 @see #m_token]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Abstract class from which all abc notation parsers inherit.
 Known limitations:
 ELEMSKIP is not supported.]]>
    </doc>
  </class>
  <!-- end class abc.parser.AbcParserAbstract -->
  <!-- start class abc.parser.AbcTokenType -->
  <class name="AbcTokenType" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="scanner.TokenType"/>
    <constructor name="AbcTokenType" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isField" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="ALPHA" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The <TT>ALPHA<TT> token type : characters from a to z and A to Z.]]>
      </doc>
    </field>
    <field name="FIELD_AREA" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  aread field token type : <TT>A:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_BOOK" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  book field token type : <TT>B:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_COMPOSER" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  composer field token type : <TT>C:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_DISCOGRAPHY" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  discography field token type : <TT>D:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_GROUP" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  group field token type : <TT>G:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_HISTORY" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  history field token type : <TT>H:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_INFORMATION" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  information field token type : <TT>I:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_DEFAULT_LENGTH" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  default length field token type : <TT>L:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_KEY" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  key field token type : <TT>K:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_METER" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  meter field token type : <TT>M:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_NOTES" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  notes field token type : <TT>N:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_ORIGIN" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  origin field token type : <TT>O:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_PARTS" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  parts field token type : <TT>P:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_TEMPO" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The tempo field token type : <TT>Q:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_RHYTHM" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The  rhythm field token type : <TT>R:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_SOURCE" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The source field token type : <TT>S:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_TITLE" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The title field token type : <TT>T:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_NUMBER" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The reference number field token type : <TT>X:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_TRANSCRNOTES" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The transcription notes field token type : <TT>Z:</TT>.]]>
      </doc>
    </field>
    <field name="FIELD_WORDS" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The words field token type : <TT>W:</TT>.]]>
      </doc>
    </field>
    <field name="TEXT" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The text token type : all characters, excluding '%'.]]>
      </doc>
    </field>
    <field name="CHORD_NAME" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The chord name token type : character '"'.]]>
      </doc>
    </field>
    <field name="COMMENT" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The comment token type : character '%'.]]>
      </doc>
    </field>
    <field name="NUMBER" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The number token type.]]>
      </doc>
    </field>
    <field name="DIGIT" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The digit token type : from 1 to 9.]]>
      </doc>
    </field>
    <field name="FRACTION" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The fraction token type : character '/'.]]>
      </doc>
    </field>
    <field name="PARENTHESIS_OPEN" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The parenthesis open token type : character '('.]]>
      </doc>
    </field>
    <field name="PARENTHESIS_CLOSE" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The parenthesis close token type : character ')'.]]>
      </doc>
    </field>
    <field name="LINE_FEED" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The line feed token type : character '\n'.]]>
      </doc>
    </field>
    <field name="LINE_BREAK" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The line break token type : character '!'.]]>
      </doc>
    </field>
    <field name="NO_LINE_BREAK" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The no line break token type : character '\'.]]>
      </doc>
    </field>
    <field name="MODE" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The mode token type : <TT>m</TT> or <TT>M</TT> or <TT></TT> or <TT></TT>
 or <TT></TT> or <TT></TT> or <TT></TT> or <TT></TT> or <TT></TT>  .]]>
      </doc>
    </field>
    <field name="KEY_HP" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The HP key specification token type : "HP" or "Hp".]]>
      </doc>
    </field>
    <field name="KEY_ACCIDENTAL" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The key accidental token type : '#' or 'b'.]]>
      </doc>
    </field>
    <field name="C_METER" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The meter C token type : "C" for 4/4, "C|" for 2/2.]]>
      </doc>
    </field>
    <field name="EQUALS" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The equals token type : character '='.]]>
      </doc>
    </field>
    <field name="C_TEMPO" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The C tempo token type : character 'C'.]]>
      </doc>
    </field>
    <field name="BASE_NOTE" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The base note token type : from 'A' to 'G' and from 'a' to 'g'.]]>
      </doc>
    </field>
    <field name="PART" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ACCIDENTAL" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="REST" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BARLINE" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="REPEAT_OPEN" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="REPEAT_CLOSE" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SPACE" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="GUITAR_CHORD" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BEGIN_SLUR" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="END_SLUR" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="GRACING_BEGIN" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="GRACING_END" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="GRACING" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="OCTAVE" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TIE" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BROKEN_RHYTHM" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MULTI_NOTE_BEGIN" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MULTI_NOTE_END" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TUPLET_SPEC" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USER_DEFINED" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NTH_REPEAT" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CHORD_TYPE" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="COMA" type="abc.parser.AbcTokenType"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This class defines all types of token that can be encountered while parsing
 a tune written using abc notation.]]>
    </doc>
  </class>
  <!-- end class abc.parser.AbcTokenType -->
  <!-- start class abc.parser.AbcToolkit -->
  <class name="AbcToolkit" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbcToolkit"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="convertToRepeatBarLine" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="barLine" type="java.lang.String"/>
    </method>
    <method name="convertBrokenRhythm" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="brokenRhythm" type="java.lang.String"/>
    </method>
    <method name="convertToOctaveTransposition" return="byte"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="octave" type="java.lang.String"/>
    </method>
    <method name="getAbsoluteDurationFor" return="abc.parser.AbcToolkit.DurationDescription"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="relativeDuration" type="abc.notation.Fraction"/>
      <param name="defaultDuration" type="short"/>
      <exception name="IllegalArgumentException" type="java.lang.IllegalArgumentException"/>
      <doc>
      <![CDATA[Returns the absolute note duration for the specified relative note
 with taking into account the default note length. 
 @return The absolute note duration for the specified relative note
 with taking into account the default note length. 
 ONLY Possible values are <TT>Note.WHOLE</TT>, <TT>Note.HALF</TT>, 
 <TT>Note.QUARTER</TT>, <TT>Note.EIGHTH</TT>, <TT>Note.SIXTEENTH</TT>, 
 <TT>Note.THIRTY_SECOND</TT>, <TT>Note.SIXTY_FOURTH</TT>. 
 Usefull to convert notes such as : 
 <IMG src="./images/dottedcrotchet.gif"/> 
 @exception IllegalArgumentException Thrown if the computing of the 
 absolute note duration is impossible.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A class that provides convenience methods to manipulate abc related 
 strings and their representation using objects from the <TT>abc.notation</TT>
 package.]]>
    </doc>
  </class>
  <!-- end class abc.parser.AbcToolkit -->
  <!-- start class abc.parser.AbcToolkit.DurationDescription -->
  <class name="AbcToolkit.DurationDescription" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getStrictDuration" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="countDots" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.AbcToolkit.DurationDescription -->
  <!-- start class abc.parser.AsynchronousTuneParser -->
  <class name="AsynchronousTuneParser" extends="abc.parser.TuneParser"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AsynchronousTuneParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new tune parser.]]>
      </doc>
    </constructor>
    <constructor name="AsynchronousTuneParser" type="boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parse" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="java.lang.String"/>
      <doc>
      <![CDATA[Parse the given string and creates a <TT>Tune</TT> object as parsing result.
 @param tune The abc tune, as a String, to be parsed.
 @return An object representation of the abc notation string.]]>
      </doc>
    </method>
    <method name="parse" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="charStream" type="java.io.Reader"/>
    </method>
    <method name="parseHeader" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="java.lang.String"/>
    </method>
    <method name="parseHeader" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="charStream" type="java.io.Reader"/>
    </method>
    <method name="superParse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="r" type="java.io.Reader"/>
    </method>
    <method name="superParseHeader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="r" type="java.io.Reader"/>
    </method>
  </class>
  <!-- end class abc.parser.AsynchronousTuneParser -->
  <!-- start class abc.parser.InvalidTokenEvent -->
  <class name="InvalidTokenEvent" extends="scanner.TokenEvent"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="InvalidTokenEvent" type="java.lang.Object, scanner.Token, scanner.TokenType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new event
 @param source The source that generates the event.
 @param token The encountered invalid token.
 @param expectedTokenType The type of token that was expected.]]>
      </doc>
    </constructor>
    <constructor name="InvalidTokenEvent" type="java.lang.Object, scanner.CharStreamPosition, scanner.TokenType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new event.
 @param source The source that generates the event.
 @param position The place where the event occured.
 @param expectedTokenType The type of token that was expected.]]>
      </doc>
    </constructor>
    <method name="getExpectedTokenType" return="scanner.TokenType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of the token that was expected.
 @return The type of the token that was expected. The place where this token
 was expected in the position returned by getPosition().
 @see #getPosition()]]>
      </doc>
    </method>
    <method name="getPosition" return="scanner.CharStreamPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the place where this event occured.
 @return The place where this event occured.]]>
      </doc>
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a String representation of this event.
 @return a String representation of this event.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Event generated when an invalid token is encountered by a parser.]]>
    </doc>
  </class>
  <!-- end class abc.parser.InvalidTokenEvent -->
  <!-- start class abc.parser.PositionableMultiNote -->
  <class name="PositionableMultiNote" extends="abc.notation.MultiNote"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="scanner.PositionableInCharStream"/>
    <constructor name="PositionableMultiNote" type="java.util.Vector"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getPosition" return="scanner.CharStreamPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setBeginPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="position" type="scanner.CharStreamPosition"/>
    </method>
    <method name="setLength"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="length" type="int"/>
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A multinote that encapsulates the information needed to locate where the abc 
 information describing this multinote was positioned in the parsed stream.]]>
    </doc>
  </class>
  <!-- end class abc.parser.PositionableMultiNote -->
  <!-- start class abc.parser.PositionableNote -->
  <class name="PositionableNote" extends="abc.notation.Note"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="scanner.PositionableInCharStream"/>
    <constructor name="PositionableNote" type="byte, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="PositionableNote" type="byte, byte, byte"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getPosition" return="scanner.CharStreamPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setBeginPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="position" type="scanner.CharStreamPosition"/>
    </method>
    <method name="setLength"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="length" type="int"/>
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A note that encapsulates the information needed to locate where the abc 
 information describing this note was positioned in the parsed stream.]]>
    </doc>
  </class>
  <!-- end class abc.parser.PositionableNote -->
  <!-- start class abc.parser.TuneBook -->
  <class name="TuneBook" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBook" type="java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <doc>
      <![CDATA[Creates a new tune book from the specified file.
 @param abcFile The file that contains tunes in abc notation.
 @exception FileNotFoundException Thrown if the specified file doesn't exist.]]>
      </doc>
    </constructor>
    <constructor name="TuneBook" type="java.io.File, abc.parser.AbcFileParserListenerInterface"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
      <doc>
      <![CDATA[Creates a new tune book from the specified file and gets feedback 
 from the parsing phasis via the specified listener.
 @param abcFile The file that contains tunes in abc notation.
 @param listener Listener to be informed of the parsing phasis.
 @throws FileNotFoundException Thrown if the specified file doesn't exist.]]>
      </doc>
    </constructor>
    <constructor name="TuneBook" type="java.io.Reader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new tune book from the specified stream.
 @param stream The stream in abc notation.
 @exception IOException If the stream does not support {@link Reader#mark(int)}, 
 or if some other I/O error occurs]]>
      </doc>
    </constructor>
    <constructor name="TuneBook" type="java.io.Reader, abc.parser.AbcFileParserListenerInterface"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new tune book from the specified stream and gets feedback 
 from the parsing phasis via the specified listener.
 @param stream The stream in abc notation.
 @param listener Listener to be informed of the parsing phasis.
 @exception IOException If the stream does not support {@link Reader#mark(int)}, 
 or if some other I/O error occurs]]>
      </doc>
    </constructor>
    <constructor name="TuneBook"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an empty tunebook.]]>
      </doc>
    </constructor>
    <constructor name="TuneBook" type="java.io.BufferedReader"
      static="false" final="false" visibility="public"
      deprecated="use TuneBook(Reader) instead.">
      <doc>
      <![CDATA[Creates a new tune book from the specified stream.
 @deprecated use TuneBook(Reader) instead.
 @param stream The stream in abc notation.]]>
      </doc>
    </constructor>
    <constructor name="TuneBook" type="java.io.BufferedReader, abc.parser.AbcFileParserListenerInterface"
      static="false" final="false" visibility="public"
      deprecated="use TuneBook(Reader, AbcFileParserListenerInterface) instead.">
      <doc>
      <![CDATA[Creates a new tune book from the specified stream and gets feedback 
 from the parsing phasis via the specified listener.
 @param stream The stream in abc notation.
 @param listener Listener to be informed of the parsing phasis. 
 @deprecated use TuneBook(Reader, AbcFileParserListenerInterface) instead.]]>
      </doc>
    </constructor>
    <method name="saveTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Saves this tunebook to the specified file.
 @param file The file where all tunes notation should be stored.
 @exception IOException Thrown if the specified file doesn't exist.]]>
      </doc>
    </method>
    <method name="getFile" return="java.io.File"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the file associated to this TuneBook if any.
 @return Returns the file associated to this TuneBook if any.
 <TT>null</TT> is returned if this TuneBook has been created from 
 scratch for instance.]]>
      </doc>
    </method>
    <method name="save"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="putTune" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tuneNotation" type="java.lang.String"/>
      <doc>
      <![CDATA[Puts the specified tune notation in this tunebook.
 If a tune with the same reference number was already existing, it updates
 it. If it's a new tune, it adds it.
 @param tuneNotation A string that describes a tune using ABC notation.
 @return The Tune representation of the tuneNotation parameter.]]>
      </doc>
    </method>
    <method name="removeTune" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="referenceNumber" type="int"/>
      <doc>
      <![CDATA[Removes the tune with specified reference number.
 @param referenceNumber The reference number of the tune that has to be
 removed.
 @return The tune that has been removed, <TT>null</TT> if no tune with the
 corresponding reference number has been found.]]>
      </doc>
    </method>
    <method name="getTune" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="referenceNumber" type="int"/>
      <doc>
      <![CDATA[Returns the tune with the specified reference number
 @param referenceNumber The reference number of the tune that should be retrieved.
 @return The tune corresponding to the specified reference number, <TT>null</TT>
 if no tune found.]]>
      </doc>
    </method>
    <method name="getTuneHeader" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="referenceNumber" type="int"/>
      <doc>
      <![CDATA[Returns the text put just before a tune in an ABC file.
 For instance, with a file such as : 
 <PRE>
 %text 1 before the first tune
 X:5
 T:xxxx
 K:D
 ...
 </PRE>
 the invokation <PRE>getTuneHeader(5)</PRE> would return the string
 <PRE>"%text 1 before the first tune\n"</PRE>
 @return The text put just before a tune in an ABC file.]]>
      </doc>
    </method>
    <method name="getTuneNotation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="referenceNumber" type="int"/>
      <exception name="NoSuchTuneException" type="abc.notation.NoSuchTuneException"/>
      <doc>
      <![CDATA[Returns the notation of the tune corresponding to the specified
 reference number.
 @param referenceNumber A reference number.
 @return A tune notation in ABC format. <TT>null</TT> if no tune has been
 found.
 @exception NoSuchTuneException Thrown if the specified reference number
 doesn't exist in this tunebook.]]>
      </doc>
    </method>
    <method name="getTunesHeaders" return="abc.notation.Tune[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns tunes header information of tunes contained in this tunebook.
 @return An array containing <TT>Tune</TT> objects representing header
 information of tunes contained in this tunebook.]]>
      </doc>
    </method>
    <method name="getReferenceNumbers" return="int[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the reference numbers of tunes contained in this tunebook.
 @return An array containing the reference numbers of tunes contained in
 this tunebook, ordered in the way they were added in this tunebook.]]>
      </doc>
    </method>
    <method name="getHighestReferenceNumber" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the highest reference number from all the reference
 numbers this tunebook contains.
 @return The highest reference number from all the reference
 numbers this tunebook contains. -1 is returned if no tune is 
 stored in this tunebook]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of tunes contained in this tunebook.
 @return The number of tunes contained in this tunebook.]]>
      </doc>
    </method>
    <method name="toVector" return="java.util.Vector"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="addListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="abc.parser.TuneBookListenerInterface"/>
      <doc>
      <![CDATA[Adds a listener to this tunebook to be aware of tunes changes.
 @param l The listener to be added.]]>
      </doc>
    </method>
    <method name="removeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="abc.parser.TuneBookListenerInterface"/>
      <doc>
      <![CDATA[Removes a listener from this tunebook.
 @param l The listener to be removed.]]>
      </doc>
    </method>
    <method name="notifyListenersForTuneChange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="e" type="abc.parser.TuneChangeEvent"/>
    </method>
    <doc>
    <![CDATA[This class provides an object representation of a tunebook. It enables you
 to store tunes ordered by reference number.]]>
    </doc>
  </class>
  <!-- end class abc.parser.TuneBook -->
  <!-- start interface abc.parser.TuneBookListenerInterface -->
  <interface name="TuneBookListenerInterface"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.EventListener"/>
    <method name="tuneChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.parser.TuneChangeEvent"/>
      <doc>
      <![CDATA[Invoked when a change occured in the tunebook.
 @param e An event describing the change that occured in the tunebook.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This is the interface that should be implemented by any object that wants
 to listens to changes occured in a tunebook.]]>
    </doc>
  </interface>
  <!-- end interface abc.parser.TuneBookListenerInterface -->
  <!-- start class abc.parser.TuneChangeEvent -->
  <class name="TuneChangeEvent" extends="java.util.EventObject"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneChangeEvent" type="java.lang.Object, int, abc.notation.Tune, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new event describing a tune change.
 @param source The source that generated this event.
 @param eventType The type of this event.
 @param newTune The tune that has changed (new, been removed or updated)
 @param newTuneNotation The notation of the tune that has been changed, removed
 or added.]]>
      </doc>
    </constructor>
    <method name="getTuneNotation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the tune notation in ABC format.
 @return the tune notation in ABC format.]]>
      </doc>
    </method>
    <method name="getType" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of this event.
 @return The type of this event.]]>
      </doc>
    </method>
    <method name="getTune" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the tune that has changed.
 @return The tune that has changed.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string representation of this event.
 @return A  string representation of this event.]]>
      </doc>
    </method>
    <field name="TUNE_UPDATED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The tune updated event type.]]>
      </doc>
    </field>
    <field name="TUNE_REMOVED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The tune removed event type.]]>
      </doc>
    </field>
    <field name="TUNE_ADDED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The tune added event type.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Event used when a state changed occured on a tune.]]>
    </doc>
  </class>
  <!-- end class abc.parser.TuneChangeEvent -->
  <!-- start class abc.parser.TuneParser -->
  <class name="TuneParser" extends="abc.parser.AbcParserAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new tune parser.]]>
      </doc>
    </constructor>
    <method name="parse" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tuneNotation" type="java.lang.String"/>
      <doc>
      <![CDATA[Parses the given string and returns the tune corresponding to the notation.
 @param tuneNotation A tune written using ABC notation.
 @return The tune corresponding to the given notation.]]>
      </doc>
    </method>
    <method name="parse" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="abcCharStream" type="java.io.Reader"/>
      <doc>
      <![CDATA[Parses the abc stream and returns the tune corresponding to the notation.
 @param abcCharStream An abc stream.
 @return The tune corresponding to the given notation.]]>
      </doc>
    </method>
    <method name="parseHeader" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tuneNotation" type="java.lang.String"/>
      <doc>
      <![CDATA[Parses the tune notation and returns only header information.
 @param tuneNotation A tune written using ABC notation.
 @return Header information corresponding to the given notation.]]>
      </doc>
    </method>
    <method name="parseHeader" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="abcCharStream" type="java.io.Reader"/>
      <doc>
      <![CDATA[Parse the given stream and creates a <TT>Tune</TT> object with no score
 as parsing result. This purpose of this method method is to provide a
 faster parsing when just abc header fields are needed.
 @param abcCharStream A stream in abc Notation.
 @return An object representation with no score of the abc stream.]]>
      </doc>
    </method>
    <method name="addListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="abc.parser.TuneParserListenerInterface"/>
      <doc>
      <![CDATA[Adds a listener to catch events thrwon by the parser durin tune parsing.
 @param listener Object that implements the TuneParserListenerInterface.
 @see #removeListener(abc.parser.TuneParserListenerInterface)]]>
      </doc>
    </method>
    <method name="removeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="abc.parser.TuneParserListenerInterface"/>
      <doc>
      <![CDATA[Removes a listener from this parser.
 @param listener The listener to be removed.
 @see #addListener(abc.parser.TuneParserListenerInterface)]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A convenient class to ease the parsing of ONE tune.
 The result of the parsing is directly returned as a Tune object
 synchronously. You don't have to attach yourself as a listener or 
 whatever to get the parsing result.]]>
    </doc>
  </class>
  <!-- end class abc.parser.TuneParser -->
  <!-- start class abc.parser.TuneParserAdapter -->
  <class name="TuneParserAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.parser.TuneParserListenerInterface"/>
    <constructor name="TuneParserAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="tuneBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Invoked when the parser reaches the beginning of a tune.]]>
      </doc>
    </method>
    <method name="invalidToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="abc.parser.InvalidTokenEvent"/>
      <doc>
      <![CDATA[Invoked when an invalid token has been parsed.
 @param evt An event describing the invalid token.]]>
      </doc>
    </method>
    <method name="validToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="scanner.TokenEvent"/>
      <doc>
      <![CDATA[Invoked when a valid token has been parsed.
 @param evt An event describing the valid token.]]>
      </doc>
    </method>
    <method name="invalidCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="scanner.InvalidCharacterEvent"/>
      <doc>
      <![CDATA[Invoked when an invalid character has been parsed.
 @param evt An event describing the invalid character.]]>
      </doc>
    </method>
    <method name="tuneEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
      <doc>
      <![CDATA[Invoked when the parser reaches the end of a tune.
 @param tune The tune that has just been parsed.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An empty implementation of a tune parser listener that does nothing.]]>
    </doc>
  </class>
  <!-- end class abc.parser.TuneParserAdapter -->
  <!-- start interface abc.parser.TuneParserListenerInterface -->
  <interface name="TuneParserListenerInterface"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.EventListener"/>
    <method name="tuneBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Invoked when the parsing of the tune begins.]]>
      </doc>
    </method>
    <method name="invalidToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="abc.parser.InvalidTokenEvent"/>
      <doc>
      <![CDATA[Invoked when an invalid token has been encountered.
 @param event An event describing the problem encountered by the parser.]]>
      </doc>
    </method>
    <method name="validToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="scanner.TokenEvent"/>
      <doc>
      <![CDATA[Invoked when a valid token has been encountered by the parser.
 @param event An event describing the valid token parsed.]]>
      </doc>
    </method>
    <method name="invalidCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="scanner.InvalidCharacterEvent"/>
      <doc>
      <![CDATA[Invoked when an invalid character has been found by the parser.
 @param event An event describing the invalid character found by the parser.]]>
      </doc>
    </method>
    <method name="tuneEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
      <doc>
      <![CDATA[Invoked when the parsing of a tune has ended.
 @param tune The tune that has just been parsed.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface that should be implemented by any object that listens to tunes
 parsing.]]>
    </doc>
  </interface>
  <!-- end interface abc.parser.TuneParserListenerInterface -->
  <doc>
  <![CDATA[This package contains classes for parsing tunes in abc notation. It needs both <TT>scanner</TT> and 
<TT>abc.notation</TT> packages to work.
The purpose of classes from this package is to extract from the abc notation all the necessary information needed 
to represent the music with objects belonging to the <TT>abc.notation</TT>.<BR/>
<BR/>
abc4j propose several classes to instantiate abc parsers :
<UL>
	<LI>{@link  abc.parser.AbcFileParser AbcFileParser} :  This class parses the abc stream and 
		provides you {@link  abc.notation.Tune Tune} instances with header information 
		(such as title, key etc...) and music part. 
	</LI>
	<LI>{@link  abc.parser.AbcHeadersParser AbcHeadersParser} : This class restricts the 
		parsing to abc headers. This enables a faster parsing compared to the one 
		done using <TT>AbcFileParser</TT>.
	</LI>
	<LI>{@link  abc.parser.TuneParser TuneParser} : This class is usefull when you 
		want to parse only one tune : you get the {@link  abc.notation.Tune Tune} result in a 
		synchronous manner without any listener mechanism. Quite convenient in some cases...
	</LI>
</UL>
<HR/>
Some specific points should be pointed out during the translation from abc music notation to "standard"
music notation :
<OL>
<LI><B>Several different ways to express music using abc can lead to the same music.</B><BR/>
For instance, the two following tunes :
<PRE>
X:1
T:dots example
L:1/8
K:D
d3d

X:2
T:dots example
L:1/4
K:D
d>d
</PRE>
describe the same melody : a dotted quarter note followed by eighth note. The consequence of this is that their 
representation in <TT>Note</TT> objects will be the same : the first note is a <TT>Note</TT> instance 
whose strict duration is <TT>Note.QUARTER</TT> and its <TT>countDots()</TT> will return 1.<BR/>
The second note is a <TT>Note.EIGHTH</TT> without any dot.<BR/><BR/>
</LI>
<LI><B>Some abc note lengths may be impossible to translate into standard music notation.</B><BR/>
For instance, let's consider the following tune :
<PRE>
X:1
T:impossible duration
L:1/8
K:D
d5
</PRE>
In such tune, the first note has a duration equals to 5 x eighth note. Such duration cannot be expressed
in standard music notation with one single note : a quarter note is 4 times a eighth note, and a dotted
quarter is 6 times a eighth note.<BR/>
For now, the resulting note will be an instance of the <TT>Note</TT> class but with an "exotic" duration.
One possible alternative would be to decompose this duration into several notes, but for now, the 
translation sticks to the approach "one abc note -> one <TT>Note</TT> instance".
</LI>
</OL>]]>
  </doc>
</package>
<package name="abc.parser.def">
  <!-- start class abc.parser.def.AccidentalDefinition -->
  <class name="AccidentalDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AccidentalDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.AccidentalDefinition -->
  <!-- start class abc.parser.def.BarlineDefinition -->
  <class name="BarlineDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BarlineDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.BarlineDefinition -->
  <!-- start class abc.parser.def.BaseNoteDefinition -->
  <class name="BaseNoteDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BaseNoteDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.BaseNoteDefinition -->
  <!-- start class abc.parser.def.BrokenRhythmDefinition -->
  <class name="BrokenRhythmDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="BrokenRhythmDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.BrokenRhythmDefinition -->
  <!-- start class abc.parser.def.ChordNameDefinition -->
  <class name="ChordNameDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ChordNameDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.ChordNameDefinition -->
  <!-- start class abc.parser.def.ComaDefinition -->
  <class name="ComaDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ComaDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.ComaDefinition -->
  <!-- start class abc.parser.def.CommentDefinition -->
  <class name="CommentDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CommentDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.CommentDefinition -->
  <!-- start class abc.parser.def.DefinitionFactory -->
  <class name="DefinitionFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefinitionFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getDefinition" return="scanner.AutomataDefinition"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="abcTokenType" type="scanner.TokenType"/>
    </method>
    <method name="getDefinition" return="scanner.AutomataDefinition"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenTypes" type="scanner.TokenType[]"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="types" type="scanner.TokenType[]"/>
    </method>
    <field name="m_allPreviouslyCreatedDefinitions" type="java.util.Vector"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class abc.parser.def.DefinitionFactory -->
  <!-- start class abc.parser.def.DefinitionFactory.DefinitionCache -->
  <class name="DefinitionFactory.DefinitionCache" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DefinitionFactory.DefinitionCache" type="scanner.TokenType[], scanner.AutomataDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isValidFor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenTypes" type="scanner.TokenType[]"/>
    </method>
    <method name="getAutomataResult" return="scanner.AutomataDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTokenTypes" return="scanner.TokenType[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.DefinitionFactory.DefinitionCache -->
  <!-- start class abc.parser.def.DigitDefinition -->
  <class name="DigitDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DigitDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.DigitDefinition -->
  <!-- start class abc.parser.def.EqualsDefinition -->
  <class name="EqualsDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="EqualsDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.EqualsDefinition -->
  <!-- start class abc.parser.def.ExtraTextDefinition -->
  <class name="ExtraTextDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ExtraTextDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.ExtraTextDefinition -->
  <!-- start class abc.parser.def.FieldAreaDefinition -->
  <class name="FieldAreaDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldAreaDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldAreaDefinition -->
  <!-- start class abc.parser.def.FieldBookDefinition -->
  <class name="FieldBookDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldBookDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldBookDefinition -->
  <!-- start class abc.parser.def.FieldComposerDefinition -->
  <class name="FieldComposerDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldComposerDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldComposerDefinition -->
  <!-- start class abc.parser.def.FieldDefaultLengthDefinition -->
  <class name="FieldDefaultLengthDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldDefaultLengthDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldDefaultLengthDefinition -->
  <!-- start class abc.parser.def.FieldDiscographyDefinition -->
  <class name="FieldDiscographyDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldDiscographyDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldDiscographyDefinition -->
  <!-- start class abc.parser.def.FieldElemskipDefinition -->
  <class name="FieldElemskipDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldElemskipDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldElemskipDefinition -->
  <!-- start class abc.parser.def.FieldGroupDefinition -->
  <class name="FieldGroupDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldGroupDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldGroupDefinition -->
  <!-- start class abc.parser.def.FieldHistoryDefinition -->
  <class name="FieldHistoryDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldHistoryDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldHistoryDefinition -->
  <!-- start class abc.parser.def.FieldInformationDefinition -->
  <class name="FieldInformationDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldInformationDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldInformationDefinition -->
  <!-- start class abc.parser.def.FieldKeyDefinition -->
  <class name="FieldKeyDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldKeyDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldKeyDefinition -->
  <!-- start class abc.parser.def.FieldMeterDefinition -->
  <class name="FieldMeterDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldMeterDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldMeterDefinition -->
  <!-- start class abc.parser.def.FieldNotesDefinition -->
  <class name="FieldNotesDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldNotesDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.FieldNotesDefinition -->
  <!-- start class abc.parser.def.FieldNumberDefinition -->
  <class name="FieldNumberDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldNumberDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldNumberDefinition -->
  <!-- start class abc.parser.def.FieldOriginDefinition -->
  <class name="FieldOriginDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldOriginDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.FieldOriginDefinition -->
  <!-- start class abc.parser.def.FieldPartsDefinition -->
  <class name="FieldPartsDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldPartsDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.FieldPartsDefinition -->
  <!-- start class abc.parser.def.FieldRhythmDefinition -->
  <class name="FieldRhythmDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldRhythmDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.FieldRhythmDefinition -->
  <!-- start class abc.parser.def.FieldSourceDefinition -->
  <class name="FieldSourceDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldSourceDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.FieldSourceDefinition -->
  <!-- start class abc.parser.def.FieldTempoDefinition -->
  <class name="FieldTempoDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldTempoDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.FieldTempoDefinition -->
  <!-- start class abc.parser.def.FieldTitleDefinition -->
  <class name="FieldTitleDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldTitleDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.FieldTitleDefinition -->
  <!-- start class abc.parser.def.FieldTranscriptionNotesDefinition -->
  <class name="FieldTranscriptionNotesDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldTranscriptionNotesDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.FieldTranscriptionNotesDefinition -->
  <!-- start class abc.parser.def.FieldWordsDefinition -->
  <class name="FieldWordsDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldWordsDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.FieldWordsDefinition -->
  <!-- start class abc.parser.def.FractionDefinition -->
  <class name="FractionDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FractionDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.FractionDefinition -->
  <!-- start class abc.parser.def.GracingBeginDefinition -->
  <class name="GracingBeginDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GracingBeginDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.GracingBeginDefinition -->
  <!-- start class abc.parser.def.GracingDefinition -->
  <class name="GracingDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GracingDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.GracingDefinition -->
  <!-- start class abc.parser.def.GracingEndDefinition -->
  <class name="GracingEndDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GracingEndDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.GracingEndDefinition -->
  <!-- start class abc.parser.def.GuitarChordDefinition -->
  <class name="GuitarChordDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GuitarChordDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.GuitarChordDefinition -->
  <!-- start class abc.parser.def.IsColonTransition -->
  <class name="IsColonTransition" extends="scanner.Transition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IsColonTransition" type="scanner.State"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.IsColonTransition -->
  <!-- start class abc.parser.def.IsTextCharTransition -->
  <class name="IsTextCharTransition" extends="scanner.Transition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IsTextCharTransition" type="scanner.State"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.IsTextCharTransition -->
  <!-- start class abc.parser.def.KeyAccidentalDefinition -->
  <class name="KeyAccidentalDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="KeyAccidentalDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.KeyAccidentalDefinition -->
  <!-- start class abc.parser.def.KeyHPDefinition -->
  <class name="KeyHPDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="KeyHPDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.KeyHPDefinition -->
  <!-- start class abc.parser.def.LineBreakDefinition -->
  <class name="LineBreakDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LineBreakDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.LineBreakDefinition -->
  <!-- start class abc.parser.def.LineFeedDefinition -->
  <class name="LineFeedDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LineFeedDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.
               \n
  start -----------------------> LINE_FEED
    |                              ^
    |  \r                    \n    |
    |-------> LINE_FEED-------------]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.LineFeedDefinition -->
  <!-- start class abc.parser.def.MeterCDefinition -->
  <class name="MeterCDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MeterCDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.MeterCDefinition -->
  <!-- start class abc.parser.def.ModeDefinition -->
  <class name="ModeDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ModeDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.ModeDefinition -->
  <!-- start class abc.parser.def.MultiNoteBeginDefinition -->
  <class name="MultiNoteBeginDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultiNoteBeginDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.MultiNoteBeginDefinition -->
  <!-- start class abc.parser.def.MultiNoteEndDefinition -->
  <class name="MultiNoteEndDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultiNoteEndDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.MultiNoteEndDefinition -->
  <!-- start class abc.parser.def.NoLineBreakDefinition -->
  <class name="NoLineBreakDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NoLineBreakDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.
               \\                 \n
  start -----------> UNKNOWN ------------> NO LINE BREAK
                       |                              ^
                       |  \r                    \n    |
                       |----> NO LINE BREAK------------]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.NoLineBreakDefinition -->
  <!-- start class abc.parser.def.NthRepeatDefinition -->
  <class name="NthRepeatDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NthRepeatDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.NthRepeatDefinition -->
  <!-- start class abc.parser.def.NumberDefinition -->
  <class name="NumberDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NumberDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="buildDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.parser.def.NumberDefinition -->
  <!-- start class abc.parser.def.OctaveDefinition -->
  <class name="OctaveDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OctaveDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.OctaveDefinition -->
  <!-- start class abc.parser.def.ParenthesisCloseDefinition -->
  <class name="ParenthesisCloseDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ParenthesisCloseDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.ParenthesisCloseDefinition -->
  <!-- start class abc.parser.def.ParenthesisOpenDefinition -->
  <class name="ParenthesisOpenDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ParenthesisOpenDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.ParenthesisOpenDefinition -->
  <!-- start class abc.parser.def.PartDefinition -->
  <class name="PartDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PartDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.PartDefinition -->
  <!-- start class abc.parser.def.RestDefinition -->
  <class name="RestDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RestDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.RestDefinition -->
  <!-- start class abc.parser.def.SlurBeginDefinition -->
  <class name="SlurBeginDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SlurBeginDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.SlurBeginDefinition -->
  <!-- start class abc.parser.def.SlurEndDefinition -->
  <class name="SlurEndDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SlurEndDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.SlurEndDefinition -->
  <!-- start class abc.parser.def.SpaceDefinition -->
  <class name="SpaceDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SpaceDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.SpaceDefinition -->
  <!-- start class abc.parser.def.TempoCDefinition -->
  <class name="TempoCDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TempoCDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.TempoCDefinition -->
  <!-- start class abc.parser.def.TexCommandDefinition -->
  <class name="TexCommandDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TexCommandDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.TexCommandDefinition -->
  <!-- start class abc.parser.def.TextDefinition -->
  <class name="TextDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TextDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.TextDefinition -->
  <!-- start class abc.parser.def.TieDefinition -->
  <class name="TieDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TieDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.TieDefinition -->
  <!-- start class abc.parser.def.TupletSpecDefinition -->
  <class name="TupletSpecDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TupletSpecDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[This scanner extends the capabilities of the default scanner to implement
  abc tokens scannig.]]>
    </doc>
  </class>
  <!-- end class abc.parser.def.TupletSpecDefinition -->
  <!-- start class abc.parser.def.UserDefinedDefinition -->
  <class name="UserDefinedDefinition" extends="scanner.AutomataDefinition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UserDefinedDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class abc.parser.def.UserDefinedDefinition -->
</package>
<package name="abc.ui.awt">
  <!-- start class abc.ui.awt.TuneEditorArea -->
  <class name="TuneEditorArea" extends="java.awt.TextArea"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneEditorArea"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TuneEditorArea" type="abc.parser.TuneParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getScrollableTracksViewportWidth" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParser" return="abc.parser.TuneParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTune" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A pane for displaying and editing tunes. This pane handles copy/paste
 actions.]]>
    </doc>
  </class>
  <!-- end class abc.ui.awt.TuneEditorArea -->
</package>
<package name="abc.ui.swing">
  <!-- start class abc.ui.swing.AddTuneAction -->
  <class name="AddTuneAction" extends="abc.ui.swing.TuneBookActionAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AddTuneAction" type="java.lang.String, java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.AddTuneAction -->
  <!-- start class abc.ui.swing.ErrorsList -->
  <class name="ErrorsList" extends="javax.swing.JList"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.parser.TuneParserListenerInterface"/>
    <constructor name="ErrorsList" type="abc.parser.TuneParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="abc.parser.TuneParser"/>
    </method>
    <method name="invalidToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="abc.parser.InvalidTokenEvent"/>
    </method>
    <method name="tuneBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="tuneEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
    <method name="validToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="scanner.TokenEvent"/>
    </method>
    <method name="invalidCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="scanner.InvalidCharacterEvent"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.ErrorsList -->
  <!-- start class abc.ui.swing.ErrorsList.Error -->
  <class name="ErrorsList.Error" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ErrorsList.Error" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getBeginOffset" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getEndoffset" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.ui.swing.ErrorsList.Error -->
  <!-- start class abc.ui.swing.ParsingEventsList -->
  <class name="ParsingEventsList" extends="javax.swing.JTable"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.parser.TuneParserListenerInterface"/>
    <constructor name="ParsingEventsList" type="abc.parser.TuneParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="abc.parser.TuneParser"/>
    </method>
    <method name="tuneBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="tuneEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
    <method name="invalidToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="abc.parser.InvalidTokenEvent"/>
    </method>
    <method name="validToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="scanner.TokenEvent"/>
    </method>
    <method name="invalidCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="scanner.InvalidCharacterEvent"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.ParsingEventsList -->
  <!-- start class abc.ui.swing.ParsingEventsList.ParsingEventsTableModel -->
  <class name="ParsingEventsList.ParsingEventsTableModel" extends="javax.swing.table.AbstractTableModel"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ParsingEventsList.ParsingEventsTableModel" type="abc.parser.TuneParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="removeAllErrors"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getEvent" return="java.util.EventObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="addEvent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="getColumnCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRowCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getValueAt" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="row" type="int"/>
      <param name="col" type="int"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.ParsingEventsList.ParsingEventsTableModel -->
  <!-- start class abc.ui.swing.PopupMenu -->
  <class name="PopupMenu" extends="javax.swing.JPopupMenu"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.awt.event.ActionListener"/>
    <constructor name="PopupMenu" type="javax.swing.JTable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.PopupMenu -->
  <!-- start class abc.ui.swing.RemoveTuneAction -->
  <class name="RemoveTuneAction" extends="javax.swing.AbstractAction"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RemoveTuneAction" type="java.lang.String, java.lang.String, int, abc.ui.swing.TuneBookTable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.RemoveTuneAction -->
  <!-- start class abc.ui.swing.SaveAction -->
  <class name="SaveAction" extends="abc.ui.swing.TuneBookActionAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SaveAction"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.SaveAction -->
  <!-- start class abc.ui.swing.TuneBookActionAbstract -->
  <class name="TuneBookActionAbstract" extends="javax.swing.AbstractAction"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookActionAbstract" type="abc.parser.TuneBook"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TuneBookActionAbstract"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getTuneBook" return="abc.parser.TuneBook"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setTuneBook"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="abc.parser.TuneBook"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookActionAbstract -->
  <!-- start class abc.ui.swing.TuneBookTable -->
  <class name="TuneBookTable" extends="javax.swing.JTable"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new TuneBookTable.]]>
      </doc>
    </constructor>
    <method name="setTuneBook"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="book" type="abc.parser.TuneBook"/>
      <doc>
      <![CDATA[Sets the tunebook to be displayed in this table.
 @param book The tunebook to be displayed in this table.]]>
      </doc>
    </method>
    <method name="getTuneBook" return="abc.parser.TuneBook"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSelectedTune" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="mouseClicked"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.MouseEvent"/>
    </method>
    <method name="mouseEntered"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.MouseEvent"/>
    </method>
    <method name="mouseExited"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.MouseEvent"/>
    </method>
    <method name="mousePressed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.MouseEvent"/>
    </method>
    <method name="mouseReleased"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.MouseEvent"/>
    </method>
    <field name="REFERENCE_NUMBER_COLUMN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TITLE_COLUMN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KEY_COLUMN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="COMPOSER_COLUMN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="INFORMATION_COLUMN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DISCOGRAPHY_COLUMN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ORIGIN_COLUMN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RHYTHM_COLUMN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BOOK_COLUMN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SOURCE_COLUMN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A scecial JTable that has integrated features for displaying tunebooks.]]>
    </doc>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable -->
  <!-- start class abc.ui.swing.TuneBookTable.AreaColumn -->
  <class name="TuneBookTable.AreaColumn" extends="abc.ui.swing.TuneBookTable.TuneColumn"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.AreaColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.AreaColumn -->
  <!-- start class abc.ui.swing.TuneBookTable.BookColumn -->
  <class name="TuneBookTable.BookColumn" extends="abc.ui.swing.TuneBookTable.TuneColumn"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.BookColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.BookColumn -->
  <!-- start class abc.ui.swing.TuneBookTable.ComposerColumn -->
  <class name="TuneBookTable.ComposerColumn" extends="abc.ui.swing.TuneBookTable.TuneColumn"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.ComposerColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.ComposerColumn -->
  <!-- start class abc.ui.swing.TuneBookTable.DiscographyColumn -->
  <class name="TuneBookTable.DiscographyColumn" extends="abc.ui.swing.TuneBookTable.TuneColumn"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.DiscographyColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.DiscographyColumn -->
  <!-- start class abc.ui.swing.TuneBookTable.InformationColumn -->
  <class name="TuneBookTable.InformationColumn" extends="abc.ui.swing.TuneBookTable.TuneColumn"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.InformationColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.InformationColumn -->
  <!-- start class abc.ui.swing.TuneBookTable.KeyColumn -->
  <class name="TuneBookTable.KeyColumn" extends="abc.ui.swing.TuneBookTable.TuneColumn"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.KeyColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.KeyColumn -->
  <!-- start class abc.ui.swing.TuneBookTable.OriginColumn -->
  <class name="TuneBookTable.OriginColumn" extends="abc.ui.swing.TuneBookTable.TuneColumn"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.OriginColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.OriginColumn -->
  <!-- start class abc.ui.swing.TuneBookTable.ReferenceNumberColumn -->
  <class name="TuneBookTable.ReferenceNumberColumn" extends="abc.ui.swing.TuneBookTable.TuneColumn"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.ReferenceNumberColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.ReferenceNumberColumn -->
  <!-- start class abc.ui.swing.TuneBookTable.RhythmColumn -->
  <class name="TuneBookTable.RhythmColumn" extends="abc.ui.swing.TuneBookTable.TuneColumn"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.RhythmColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.RhythmColumn -->
  <!-- start class abc.ui.swing.TuneBookTable.SourceColumn -->
  <class name="TuneBookTable.SourceColumn" extends="abc.ui.swing.TuneBookTable.TuneColumn"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.SourceColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.SourceColumn -->
  <!-- start class abc.ui.swing.TuneBookTable.TitleColumn -->
  <class name="TuneBookTable.TitleColumn" extends="abc.ui.swing.TuneBookTable.TuneColumn"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.TitleColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.TitleColumn -->
  <!-- start class abc.ui.swing.TuneBookTable.TuneColumn -->
  <class name="TuneBookTable.TuneColumn" extends="javax.swing.table.TableColumn"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookTable.TuneColumn"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getValueFor" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
    <method name="sort"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ascendingOrder" type="boolean"/>
    </method>
    <method name="isAscendingOrdered" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isDescendingOrdered" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abc.ui.swing.TuneBookTable.TuneColumn -->
  <!-- start class abc.ui.swing.TuneEditorPane -->
  <class name="TuneEditorPane" extends="javax.swing.JTextPane"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.awt.event.ActionListener"/>
    <constructor name="TuneEditorPane"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TuneEditorPane" type="abc.parser.TuneParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TuneEditorPane" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="TuneEditorPane" type="abc.parser.TuneParser, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getScrollableTracksViewportWidth" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getParser" return="abc.parser.TuneParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isColoringEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setColoringEnable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="coloring" type="boolean"/>
    </method>
    <method name="setSize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="d" type="java.awt.Dimension"/>
    </method>
    <method name="getTune" return="abc.notation.Tune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="doc" type="javax.swing.text.Document"/>
    </method>
    <method name="setText"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="text" type="java.lang.String"/>
    </method>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
      <doc>
      <![CDATA[This method is activated on the Keystrokes we are listening to
 in this implementation. Here it listens for Copy and Paste ActionCommands.]]>
      </doc>
    </method>
    <field name="ERROR_STYLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BARS_STYLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TEXT_STYLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="COMMENT_STYLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NOTE_STYLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="GRACING_STYLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FIELD_STYLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RHYTHM_STYLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DEFAULT_STYLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="REFRESHER_THREAD_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A pane for displaying and editing tunes. This pane handles copy/paste
 actions.]]>
    </doc>
  </class>
  <!-- end class abc.ui.swing.TuneEditorPane -->
  <!-- start class abc.ui.swing.TuneEditorSplitPane -->
  <class name="TuneEditorSplitPane" extends="javax.swing.JSplitPane"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneEditorSplitPane"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getTuneEditorPane" return="abc.ui.swing.TuneEditorPane"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A pane for displaying tunes.]]>
    </doc>
  </class>
  <!-- end class abc.ui.swing.TuneEditorSplitPane -->
</package>
<package name="abcynth">
  <!-- start class abcynth.CircularBuffer -->
  <class name="CircularBuffer" extends="java.util.Vector"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CircularBuffer" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setSizeLimit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sizeLimit" type="int"/>
    </method>
    <method name="addElement"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class abcynth.CircularBuffer -->
  <!-- start class abcynth.HelpAction -->
  <class name="HelpAction" extends="javax.swing.AbstractAction"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HelpAction" type="java.lang.String, java.lang.String, int, java.awt.Component"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abcynth.HelpAction -->
  <!-- start class abcynth.LogFrame -->
  <class name="LogFrame" extends="javax.swing.JFrame"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.parser.AbcFileParserListenerInterface"/>
    <constructor name="LogFrame"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getErrorsArea" return="javax.swing.JTextArea"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="tuneBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="invalidToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="abc.parser.InvalidTokenEvent"/>
    </method>
    <method name="validToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="scanner.TokenEvent"/>
    </method>
    <method name="invalidCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="scanner.InvalidCharacterEvent"/>
    </method>
    <method name="tuneEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
    <method name="fileBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="lineProcessed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="line" type="java.lang.String"/>
    </method>
    <method name="fileEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class abcynth.LogFrame -->
  <!-- start class abcynth.PlayerApp -->
  <class name="PlayerApp" extends="javax.swing.JFrame"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.midi.TunePlayerListenerInterface"/>
    <implements name="java.awt.event.WindowListener"/>
    <constructor name="PlayerApp"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
    </method>
    <method name="setTuneBook"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tunebook" type="abc.parser.TuneBook"/>
    </method>
    <method name="onExit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="windowActivated"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.WindowEvent"/>
    </method>
    <method name="windowClosed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.WindowEvent"/>
    </method>
    <method name="windowClosing"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.WindowEvent"/>
    </method>
    <method name="windowDeactivated"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.WindowEvent"/>
    </method>
    <method name="windowDeiconified"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.WindowEvent"/>
    </method>
    <method name="windowIconified"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.WindowEvent"/>
    </method>
    <method name="windowOpened"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.WindowEvent"/>
    </method>
    <method name="tempoChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.TempoChangeEvent"/>
    </method>
    <method name="playBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.PlayerStateChangeEvent"/>
    </method>
    <method name="playEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.PlayerStateChangeEvent"/>
    </method>
    <method name="notePlayed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="note" type="abc.notation.NoteAbstract"/>
    </method>
    <method name="partPlayed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="begin" type="int"/>
      <param name="end" type="int"/>
    </method>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="arg" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[A simple user interface to display abc files content and play
 tunes.]]>
    </doc>
  </class>
  <!-- end class abcynth.PlayerApp -->
  <!-- start class abcynth.PlayerApp.EnableColoringAction -->
  <class name="PlayerApp.EnableColoringAction" extends="javax.swing.AbstractAction"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlayerApp.EnableColoringAction" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abcynth.PlayerApp.EnableColoringAction -->
  <!-- start class abcynth.PlayerApp.ExitAction -->
  <class name="PlayerApp.ExitAction" extends="javax.swing.AbstractAction"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlayerApp.ExitAction" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abcynth.PlayerApp.ExitAction -->
  <!-- start class abcynth.PlayerApp.NewTuneBookAction -->
  <class name="PlayerApp.NewTuneBookAction" extends="javax.swing.AbstractAction"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlayerApp.NewTuneBookAction" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abcynth.PlayerApp.NewTuneBookAction -->
  <!-- start class abcynth.PlayerApp.OpenAbcFileAction -->
  <class name="PlayerApp.OpenAbcFileAction" extends="javax.swing.AbstractAction"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlayerApp.OpenAbcFileAction" type="java.lang.String, java.lang.String, int, java.awt.Component"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abcynth.PlayerApp.OpenAbcFileAction -->
  <!-- start class abcynth.PlayerApp.OpenLastAction -->
  <class name="PlayerApp.OpenLastAction" extends="javax.swing.AbstractAction"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlayerApp.OpenLastAction" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abcynth.PlayerApp.OpenLastAction -->
  <!-- start class abcynth.PlayerApp.SaveAction -->
  <class name="PlayerApp.SaveAction" extends="abc.ui.swing.TuneBookActionAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlayerApp.SaveAction" type="java.lang.String, java.lang.String, java.awt.Component"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abcynth.PlayerApp.SaveAction -->
  <!-- start class abcynth.PlayerApp.SaveToAbcFileAction -->
  <class name="PlayerApp.SaveToAbcFileAction" extends="abc.ui.swing.TuneBookActionAbstract"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlayerApp.SaveToAbcFileAction" type="java.lang.String, java.lang.String, int, java.awt.Component"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abcynth.PlayerApp.SaveToAbcFileAction -->
  <!-- start class abcynth.PlayerApp.ShowHideLogAction -->
  <class name="PlayerApp.ShowHideLogAction" extends="javax.swing.AbstractAction"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlayerApp.ShowHideLogAction" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abcynth.PlayerApp.ShowHideLogAction -->
  <!-- start class abcynth.PlayerApp.Tune2MidiExport -->
  <class name="PlayerApp.Tune2MidiExport" extends="javax.swing.AbstractAction"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlayerApp.Tune2MidiExport" type="java.lang.String, java.lang.String, java.awt.Component"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="actionPerformed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="java.awt.event.ActionEvent"/>
    </method>
  </class>
  <!-- end class abcynth.PlayerApp.Tune2MidiExport -->
  <!-- start class abcynth.PlayerApplet -->
  <class name="PlayerApplet" extends="javax.swing.JApplet"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PlayerApplet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="destroy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A simple user interface to display abc files content and play
 tunes.]]>
    </doc>
  </class>
  <!-- end class abcynth.PlayerApplet -->
  <!-- start class abcynth.PlayerToolBar -->
  <class name="PlayerToolBar" extends="javax.swing.JToolBar"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.midi.TunePlayerListenerInterface"/>
    <constructor name="PlayerToolBar" type="abc.midi.TunePlayer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="tempoChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.TempoChangeEvent"/>
    </method>
    <method name="playBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.PlayerStateChangeEvent"/>
    </method>
    <method name="notePlayed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.notation.NoteAbstract"/>
    </method>
    <method name="playEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="e" type="abc.midi.PlayerStateChangeEvent"/>
    </method>
    <method name="partPlayed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="begin" type="int"/>
      <param name="end" type="int"/>
    </method>
    <method name="setTune"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
    <method name="getPlayButton" return="javax.swing.JButton"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A simple user interface to display abc files content and play
 tunes.]]>
    </doc>
  </class>
  <!-- end class abcynth.PlayerToolBar -->
  <!-- start class abcynth.TuneBookEditorPanel -->
  <class name="TuneBookEditorPanel" extends="javax.swing.JSplitPane"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneBookEditorPanel"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isEditingTune" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTuneEditArea" return="abc.ui.swing.TuneEditorPane"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTuneBookTable" return="abc.ui.swing.TuneBookTable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTuneEditSplitPane" return="abcynth.TuneEditorSplitPane"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setTuneBook"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tuneBook" type="abc.parser.TuneBook"/>
    </method>
    <method name="onTuneSelectedChange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newSelectedTuneReferenceNumber" type="int"/>
    </method>
    <doc>
    <![CDATA[A simple user interface to display abc files content and play
 tunes.]]>
    </doc>
  </class>
  <!-- end class abcynth.TuneBookEditorPanel -->
  <!-- start class abcynth.TuneEditorSplitPane -->
  <class name="TuneEditorSplitPane" extends="javax.swing.JSplitPane"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TuneEditorSplitPane"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getTuneEditorPane" return="abc.ui.swing.TuneEditorPane"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A pane for displaying tunes.]]>
    </doc>
  </class>
  <!-- end class abcynth.TuneEditorSplitPane -->
</package>
<package name="check">
  <!-- start class check.AbcCheck -->
  <class name="AbcCheck" extends="java.applet.Applet"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="abc.parser.TuneParserListenerInterface"/>
    <constructor name="AbcCheck"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="tuneBegin"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="invalidToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="abc.parser.InvalidTokenEvent"/>
    </method>
    <method name="validToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="scanner.TokenEvent"/>
    </method>
    <method name="invalidCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="scanner.InvalidCharacterEvent"/>
    </method>
    <method name="tuneEnd"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tune" type="abc.notation.Tune"/>
    </method>
  </class>
  <!-- end class check.AbcCheck -->
</package>
<package name="scanner">
  <!-- start class scanner.AutomataDefinition -->
  <class name="AutomataDefinition" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AutomataDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new definition.]]>
      </doc>
    </constructor>
    <constructor name="AutomataDefinition" type="scanner.State"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new definition with the given starting state.
 @param startingState The starting state of this definition.]]>
      </doc>
    </constructor>
    <method name="getStartingState" return="scanner.State"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the starting state of this automata.
 @return The starting state of this automata.]]>
      </doc>
    </method>
    <method name="union" return="scanner.AutomataDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="def" type="scanner.AutomataDefinition"/>
      <doc>
      <![CDATA[Realize an union between this definition and the given one.
 @param def The definition to be unioned with this one.
 @return A reference on this once unioned.]]>
      </doc>
    </method>
    <method name="copyFrom"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="definition" type="scanner.AutomataDefinition"/>
      <doc>
      <![CDATA[Copy the given definition to this one. This is equivalent to set the
 starting state of this definition to the starting state of the specified
 one.
 @param definition The definition of an automata.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string representation of this object.
 @return A string representation of this object.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class enables the description of automatas. Those definitions are described
 using states and transitions between those states.
 @see Transition
 @see State]]>
    </doc>
  </class>
  <!-- end class scanner.AutomataDefinition -->
  <!-- start class scanner.CharStreamPosition -->
  <class name="CharStreamPosition" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="CharStreamPosition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new position with default values (column=1, line=1, offset=0).]]>
      </doc>
    </constructor>
    <constructor name="CharStreamPosition" type="scanner.CharStreamPosition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new position a the same place as the given one.
 @param pos The position to be take as reference to create this new position.]]>
      </doc>
    </constructor>
    <constructor name="CharStreamPosition" type="int, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new position at the specified place.
 @param column This position's column.
 @param line This position's line.
 @param charactersOffset This position's offset.]]>
      </doc>
    </constructor>
    <method name="setPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pos" type="scanner.CharStreamPosition"/>
      <doc>
      <![CDATA[Sets this position to the same place as the specified one.
 @param pos The position where this one has to be set.]]>
      </doc>
    </method>
    <method name="setPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="column" type="int"/>
      <param name="line" type="int"/>
      <param name="offset" type="int"/>
      <doc>
      <![CDATA[Sets this position to the specified place.
 @param column This position's new colum.
 @param line This position's new line.
 @param offset This position's new offset.]]>
      </doc>
    </method>
    <method name="setColumn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="column" type="int"/>
      <doc>
      <![CDATA[Sets the column of this position.
 @param column This position's new colum.]]>
      </doc>
    </method>
    <method name="setLine"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="line" type="int"/>
      <doc>
      <![CDATA[Sets the line of this position.
 @param line This position's new line.]]>
      </doc>
    </method>
    <method name="setCharactersOffset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="charactersOffset" type="int"/>
      <doc>
      <![CDATA[Sets the offset of this position.
 @param charactersOffset The character offset to be applied to this position.]]>
      </doc>
    </method>
    <method name="getColumn" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the column of this position.
 @return The column of this position.]]>
      </doc>
    </method>
    <method name="getLine" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the line of this position.
 @return The line of this position.]]>
      </doc>
    </method>
    <method name="getCharactersOffset" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the character offset.
 @return The character offset. Character offset is equal to zero for the
 first character.]]>
      </doc>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new position at the same place as this one.
 @return A new position at the same place as this one.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string representation this object.
 @return A string representation this object.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class defines positions in a stream of characters.]]>
    </doc>
  </class>
  <!-- end class scanner.CharStreamPosition -->
  <!-- start class scanner.FinaleStateAutomata -->
  <class name="FinaleStateAutomata" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FinaleStateAutomata"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new automata.]]>
      </doc>
    </constructor>
    <constructor name="FinaleStateAutomata" type="scanner.AutomataDefinition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new automata from the specified definition.
 @param def The definition of states and transitions of this automata.]]>
      </doc>
    </constructor>
    <method name="getDefinition" return="scanner.AutomataDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the definition of this automata.
 @return the definition of this automata.]]>
      </doc>
    </method>
    <method name="setDefinition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="definition" type="scanner.AutomataDefinition"/>
      <doc>
      <![CDATA[Sets the definition of this automata. Changing the definition of this
 automata will reinitialize it.
 @param definition The definition of states and transitions of this automata.
 @see #initialize()]]>
      </doc>
    </method>
    <method name="sendChar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="character" type="char"/>
      <exception name="NoTransitionFoundException" type="scanner.NoTransitionFoundException"/>
      <doc>
      <![CDATA[Sends a character to this automata.
 @param character The character to be sent to this automata.]]>
      </doc>
    </method>
    <method name="getTransitionFor" return="scanner.Transition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="character" type="char"/>
      <doc>
      <![CDATA[Returns the transition that can be activated from this automata's
 current state with the specified character.
 @param character A character.
 @return The transition that can be activated from this automata's current
 state. <TT>null</TT> is returned if no transition can be activated with
 this character from the current state.
 @see #getCurrentState()]]>
      </doc>
    </method>
    <method name="getStartingState" return="scanner.State"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the starting state of this automata.
 @return The starting state of this automata.]]>
      </doc>
    </method>
    <method name="getCurrentState" return="scanner.State"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current state of this automata.
 @return The current state of this automata.]]>
      </doc>
    </method>
    <method name="getReceivedCharacters" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string that representes the list of all characters
 received by this finale state automata.]]>
      </doc>
    </method>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes this state machine. The current state is back to the
 starting state and the received characters are initialized to none.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string representation of this object.
 @return A string representation of this object.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class defines finale state automatas.
 @see AutomataDefinition]]>
    </doc>
  </class>
  <!-- end class scanner.FinaleStateAutomata -->
  <!-- start class scanner.InvalidCharacterEvent -->
  <class name="InvalidCharacterEvent" extends="java.util.EventObject"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="scanner.PositionableInCharStream"/>
    <constructor name="InvalidCharacterEvent" type="java.lang.Object, char, scanner.CharStreamPosition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new event with the following parameters.
 @param source The source that has detected the invalid character.
 @param character The invalid character.
 @param position The position where the invalid character has been detected.]]>
      </doc>
    </constructor>
    <method name="getCharacter" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the invalid character.
 @return The invalid character.]]>
      </doc>
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPosition" return="scanner.CharStreamPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the position where the invalid character has been detected.
 @return The position where the invalid character has been detected.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This event is thrown when an unexpected character is encountered.]]>
    </doc>
  </class>
  <!-- end class scanner.InvalidCharacterEvent -->
  <!-- start class scanner.IsAlphaTransition -->
  <class name="IsAlphaTransition" extends="scanner.Transition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IsAlphaTransition" type="scanner.State"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default constructor.]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[This class defines a transition that corresponds to any alpha character :
 a letter, upper or lower case.]]>
    </doc>
  </class>
  <!-- end class scanner.IsAlphaTransition -->
  <!-- start class scanner.IsDigitTransition -->
  <class name="IsDigitTransition" extends="scanner.Transition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IsDigitTransition" type="scanner.State"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default constructor.]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[This class defines a transition that corresponds to a digit character.]]>
    </doc>
  </class>
  <!-- end class scanner.IsDigitTransition -->
  <!-- start class scanner.NoSuchTokenException -->
  <class name="NoSuchTokenException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NoSuchTokenException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[A runtime exception thrown when no more token can be generated.]]>
    </doc>
  </class>
  <!-- end class scanner.NoSuchTokenException -->
  <!-- start class scanner.NoTransitionFoundException -->
  <class name="NoTransitionFoundException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NoTransitionFoundException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[A runtime exception thrown when no transition is found when sending a
 character in a finale state automata.]]>
    </doc>
  </class>
  <!-- end class scanner.NoTransitionFoundException -->
  <!-- start interface scanner.PositionableInCharStream -->
  <interface name="PositionableInCharStream"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getPosition" return="scanner.CharStreamPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the start position.
 @return The start position.]]>
      </doc>
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the length of this positionable object.
 @return The length of this positionable object.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface that should be implemented by any object that has a position
 in a char stream.]]>
    </doc>
  </interface>
  <!-- end interface scanner.PositionableInCharStream -->
  <!-- start class scanner.Scanner -->
  <class name="Scanner" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Scanner" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new scanner to scan the specified string.
 @param charStreamValue A string to be scanned.]]>
      </doc>
    </constructor>
    <constructor name="Scanner" type="java.io.Reader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new scanner to scan the specified stream
 @param stream The stream to be scanned.]]>
      </doc>
    </constructor>
    <constructor name="Scanner"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new scanner.]]>
      </doc>
    </constructor>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="charStreamValue" type="java.lang.String"/>
      <doc>
      <![CDATA[Inits this scanner to be able to perform a scan on the given string
 @param charStreamValue A string to be scanned.]]>
      </doc>
    </method>
    <method name="init"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="readerStream" type="java.io.Reader"/>
      <doc>
      <![CDATA[Inits this scanner to be able to perform a scan on the given stream
 @param readerStream The stream to be scanned.]]>
      </doc>
    </method>
    <method name="addListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="scanner.ScannerListenerInterface"/>
      <doc>
      <![CDATA[Adds a listener to this scanner.
 @param listener The listener to be added to this scanner.]]>
      </doc>
    </method>
    <method name="removeListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="scanner.ScannerListenerInterface"/>
      <doc>
      <![CDATA[Removes a listener from this scanner.
 @param listener The listener to be removed from this scanner.]]>
      </doc>
    </method>
    <method name="nextToken" return="scanner.Token"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="NoSuchTokenException" type="scanner.NoSuchTokenException"/>
      <doc>
      <![CDATA[Returns the next token encountered.
 @return The next token encountered.
 @exception Thrown if there's no next valid token.]]>
      </doc>
    </method>
    <method name="hasNext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <TT>true</TT> if there's any character left.
 @return <TT>true</TT> if there's any character left, <TT>false</TT>
 otherwise.]]>
      </doc>
    </method>
    <method name="getFinaleStateAutomata" return="scanner.FinaleStateAutomata"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current finale state automata currently used to separate
 tokens.
 @return the current finale state automata currently used to separate
 tokens.]]>
      </doc>
    </method>
    <method name="setFinaleStateAutomata"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fsa" type="scanner.FinaleStateAutomata"/>
    </method>
    <method name="getPosition" return="scanner.CharStreamPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the position of the scanner if the input stream.
 @return The position of the scanner if the input stream. The last processed
 character position.]]>
      </doc>
    </method>
    <method name="getCurrentLine" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="notifyListenersForToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="token" type="scanner.Token"/>
    </method>
    <method name="notifyListenersForInvalidCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="character" type="char"/>
      <param name="pos" type="scanner.CharStreamPosition"/>
    </method>
    <method name="notifyListenersForLineScanned"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="line" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[A scanner is able to separate tokens from an input stream, following states
 defined in a finale state automata.]]>
    </doc>
  </class>
  <!-- end class scanner.Scanner -->
  <!-- start class scanner.ScannerAdapter -->
  <class name="ScannerAdapter" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="scanner.ScannerListenerInterface"/>
    <implements name="java.util.EventListener"/>
    <constructor name="ScannerAdapter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="tokenGenerated"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="scanner.TokenEvent"/>
      <doc>
      <![CDATA[Invoked when a new token has been generated.
 @param event Event containing all information about the token generated.]]>
      </doc>
    </method>
    <method name="invalidCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="scanner.InvalidCharacterEvent"/>
      <doc>
      <![CDATA[Invoked when an invalid character has been found.
 @param evt Event containing all information about the invalid character
 found.]]>
      </doc>
    </method>
    <method name="lineProcessed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="line" type="java.lang.String"/>
      <doc>
      <![CDATA[Invoked when a line has been processed.
 @param line The line that has just been processed.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An empty  default implementation of for scanner listener.]]>
    </doc>
  </class>
  <!-- end class scanner.ScannerAdapter -->
  <!-- start interface scanner.ScannerListenerInterface -->
  <interface name="ScannerListenerInterface"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.EventListener"/>
    <method name="tokenGenerated"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="event" type="scanner.TokenEvent"/>
      <doc>
      <![CDATA[Invoked when a new token has been generated.
 @param event Event containing all information about the token generated.]]>
      </doc>
    </method>
    <method name="invalidCharacter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="evt" type="scanner.InvalidCharacterEvent"/>
      <doc>
      <![CDATA[Invoked when an invalid character has been found.
 @param evt Event containing all information about the invalid character
 found.]]>
      </doc>
    </method>
    <method name="lineProcessed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="line" type="java.lang.String"/>
      <doc>
      <![CDATA[Invoked when a line has been processed.
 @param line The line that has just been processed.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface should be implemented by any object that wants to listen
 to scanner events thrown during characters stream scanning.]]>
    </doc>
  </interface>
  <!-- end interface scanner.ScannerListenerInterface -->
  <!-- start class scanner.Set -->
  <class name="Set" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="Set" type="scanner.TokenType[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new set.
 @param tokenTypes Token types to be put in the created set.]]>
      </doc>
    </constructor>
    <constructor name="Set"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default constructor.
 Constructs an empty set.]]>
      </doc>
    </constructor>
    <constructor name="Set" type="scanner.Set"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new set from the specified one.
 @param set The set from which this set has to be initialized.]]>
      </doc>
    </constructor>
    <constructor name="Set" type="scanner.TokenType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new set containing the specified tokenType.
 @param tokenType Token type to be put in the created set.]]>
      </doc>
    </constructor>
    <method name="getTypes" return="scanner.TokenType[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an array representation of the types contained in this set.
 @return An array representation of the types contained in this set. An
 array with size 0 is returned if the set is empty.]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of elements in this set.
 @return The number of elements in this set.]]>
      </doc>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenType" type="scanner.TokenType"/>
      <doc>
      <![CDATA[Adds the specified token type in the set. This token type is added even if
 the set already contains it.
 @param tokenType The token type added in the set.]]>
      </doc>
    </method>
    <method name="remove" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenType" type="scanner.TokenType"/>
      <doc>
      <![CDATA[Removes the spcified token type from this set.
 @param tokenType The token type to be removed from this set.
 @return <TT>true</TT> if the token type was contained in this set.
 <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenType" type="scanner.TokenType"/>
      <doc>
      <![CDATA[Checks if a token type if contained in this set or not.
 @param tokenType The type of token that may be contained in this set.
 @return <TT>true</TT> if the token type is contained in this set.
 <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="aSet" type="scanner.Set"/>
    </method>
    <method name="remove"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="aSet" type="scanner.Set"/>
      <doc>
      <![CDATA[Removes all elements of the given set from this set.
 @param aSet Elements to be removed from this set.]]>
      </doc>
    </method>
    <method name="createUnion" return="scanner.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="aSet" type="scanner.Set"/>
      <doc>
      <![CDATA[Creates a new set containing tokens types from this set AND tokens types
 from the given set.
 @param aSet The set to be unioned with this one.
 @return A set containing tokens types from this set AND tokens types
 from the given set.]]>
      </doc>
    </method>
    <method name="createUnion" return="scanner.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenType" type="scanner.TokenType"/>
      <doc>
      <![CDATA[Creates a new set containing tokens types from this set AND the specified
 token type.
 @param tokenType The token type to be added to this set to create the
 union result.
 @return A set containing tokens types from this set AND the specified
 token type.]]>
      </doc>
    </method>
    <method name="union" return="scanner.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="aSet" type="scanner.Set"/>
      <doc>
      <![CDATA[Adds the tokens types from the specified set to this set (without
 creating any new set).
 @param aSet A set containing tokens types to be added to this set.
 @return A reference on this.]]>
      </doc>
    </method>
    <method name="union" return="scanner.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenType" type="scanner.TokenType"/>
      <doc>
      <![CDATA[Performs an union with the specified token type without creating any
 new set.
 @param tokenType The token type to be unioned with this set.
 @return A reference on this.]]>
      </doc>
    </method>
    <method name="intersect" return="scanner.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="aSet" type="scanner.Set"/>
      <doc>
      <![CDATA[Returns a new set containing elements contained in this set AND in the
 given one.
 @param aSet The set to be intersected with this one.
 @return A new set containing elements contained in this set AND in the
 given one.]]>
      </doc>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string representation of this set.
 @return A string representation of this set.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class defines sets used to group token types while parsing.]]>
    </doc>
  </class>
  <!-- end class scanner.Set -->
  <!-- start class scanner.State -->
  <class name="State" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="State" type="scanner.TokenType, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new state.
 @param type The type of the state.
 @param isTokenStateValue <TT>true</TT> if the state is a token state,
 <TT>falsew</TT> otherwise.]]>
      </doc>
    </constructor>
    <method name="getType" return="scanner.TokenType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of this state.
 @return The type of this state.]]>
      </doc>
    </method>
    <method name="getTransitions" return="scanner.Transition[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an array containing transitions from this state.
 @return an array containing transitions from this state.]]>
      </doc>
    </method>
    <method name="getTransitionFor" return="scanner.Transition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="character" type="char"/>
      <doc>
      <![CDATA[Returns the transition that can be activated for the specified character.
 @param character A character.
 @return The transition that can be activated for the specified character.
 <TT>null</TT> is returned if no transition is specified from this state
 for the given character.]]>
      </doc>
    </method>
    <method name="hasSelfTransitions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <TT>true</TT> if this state has self transitions. A self
 transition is a transition whose target state is equals to the source state.
 @return <TT>true</TT> if this state has self transitions, <TT>false</TT>
 otherwise.]]>
      </doc>
    </method>
    <method name="countTransitions" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of transitions from this state.
 @return the number of transitions from this state.]]>
      </doc>
    </method>
    <method name="setType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="scanner.TokenType"/>
      <doc>
      <![CDATA[Sets the type of this state.
 @param type The new type of this state.]]>
      </doc>
    </method>
    <method name="setTokenState"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isToken" type="boolean"/>
      <doc>
      <![CDATA[Sets if this state is a token state or not.
 @param isToken <TT>true</TT> if this state is a token state,
 <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="isTokenState" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <TT>true</TT> if this state is a token state.
 @return <TT>true</TT> if this state is a token state,
 <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="addTransition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transition" type="scanner.Transition"/>
      <doc>
      <![CDATA[Adds a transition to this state.
 @param transition The transition to be added to this state.
 @see #removeTransition(scanner.Transition)]]>
      </doc>
    </method>
    <method name="removeTransition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transition" type="scanner.Transition"/>
      <doc>
      <![CDATA[Removes the given transition.
 @param transition The transition to be removed.
 @return <TT>true</TT> if the given transition was one of this state's
 transition, <TT>false</TT> otherwise.
 @see #addTransition(scanner.Transition)]]>
      </doc>
    </method>
    <method name="union" return="scanner.State"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="scanner.State"/>
      <doc>
      <![CDATA[Performs an union between this state and the given one.
 Union between a token state and a non token state will give a token state.
 Union between 2 non token states will give a non token state.
 Union between 2 token states is possible only if only one of them has
 self transitions.
 Union between 2 token states that both have self transitions will throw
 a runtime exception.
 Union between 2 token states that both haven't any self transition
 will return the state given as paremeter
 @param state a State
 @return State The resulting union from this state and the given one.]]>
      </doc>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This class defines states used in finale state automata.]]>
    </doc>
  </class>
  <!-- end class scanner.State -->
  <!-- start class scanner.Token -->
  <class name="Token" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="scanner.PositionableInCharStream"/>
    <constructor name="Token" type="java.lang.String, scanner.TokenType, scanner.CharStreamPosition"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new token with the specified values.
 @param val The token value.
 @param type The type of this token
 @param position The position of this token : equals to the position
 of the first character of this token.]]>
      </doc>
    </constructor>
    <method name="getType" return="scanner.TokenType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of this token.
 @return The type of this token.]]>
      </doc>
    </method>
    <method name="getValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the string of this token.
 @return the string of this token.]]>
      </doc>
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPosition" return="scanner.CharStreamPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the position of this token.
 @return The position of this token, this is equals to the position
 of the first character of this token.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string representation of this token.
 @return A string representation of this token.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Tokens are objects created by a <TT>scanner</TT> while scanning a stream of
 characters.]]>
    </doc>
  </class>
  <!-- end class scanner.Token -->
  <!-- start class scanner.TokenEvent -->
  <class name="TokenEvent" extends="java.util.EventObject"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="scanner.PositionableInCharStream"/>
    <constructor name="TokenEvent" type="java.lang.Object, scanner.Token"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new token event.
 @param source The source that has detected the new token.
 @param token The detected token.]]>
      </doc>
    </constructor>
    <method name="getPosition" return="scanner.CharStreamPosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getToken" return="scanner.Token"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the found token.
 @return The found token.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string representation of this token event.
 @return A string representation of this token event.]]>
      </doc>
    </method>
    <field name="m_token" type="scanner.Token"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The token found.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This event is thrown when a new token has been detected.]]>
    </doc>
  </class>
  <!-- end class scanner.TokenEvent -->
  <!-- start interface scanner.TokenType -->
  <interface name="TokenType"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="UNKNOWN" type="scanner.TokenType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The unknown token type.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Tokens types add semantic to tokens to diferenciate them.]]>
    </doc>
  </interface>
  <!-- end interface scanner.TokenType -->
  <!-- start class scanner.Transition -->
  <class name="Transition" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Transition" type="scanner.State, char[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new transition.
 @param state The new state reached if this transition is activated.
 @param characters Characters that will activate this transition.]]>
      </doc>
    </constructor>
    <constructor name="Transition" type="scanner.State, char"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isPossible" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="character" type="char"/>
      <doc>
      <![CDATA[Checks if this transition would be activated with the given character.
 @param character The character that may activate this transition.
 @return <TT>true</TT> if the given character would activate the transition,
 <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="getChars" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns characters that activate this transition.
 @return Characters that activate this transition.]]>
      </doc>
    </method>
    <method name="getTargetState" return="scanner.State"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the target state of this transition.
 @return The target state of this transition : the state that is reached
 if this transition is activated.]]>
      </doc>
    </method>
    <method name="getSourceState" return="scanner.State"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the source state of this transition.
 @return The source state of this transition : the state to which this
 transition has been added.]]>
      </doc>
    </method>
    <method name="setTargetState"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="scanner.State"/>
      <doc>
      <![CDATA[Sets the target state of this transition.
 @param state the target state of this transition.]]>
      </doc>
    </method>
    <method name="isSelfTransition" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns <TT>true</TT> if this transition is a self transition. A
 transition is a self transition when its source state is equal to
 its target state.
 @return <TT>true</TT> if this transition is a self transition, <TT>false</TT>
 otherwise.]]>
      </doc>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characters" type="char[]"/>
      <doc>
      <![CDATA[Adds new characters to this transition to activate it.]]>
      </doc>
    </method>
    <method name="intersect" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parameter" type="char[]"/>
      <doc>
      <![CDATA[Returns an array containing characters that are activating this transition
 and that are also contained in the given array. Characters activating this
 transition are left unchanged.
 @param parameter An array of char.
 @return An array containing characters that are activating this transition
 and that are also contained in the given array.]]>
      </doc>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characters" type="char[]"/>
      <doc>
      <![CDATA[Returns <TT>true<TT> if the given characters activate this transition.
 @return <TT>true<TT> if the given characters activate this transition,
 <TT>false</TT> otherwise.
 @param characters An array of char.]]>
      </doc>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="character" type="char"/>
      <doc>
      <![CDATA[Returns <TT>true<TT> if the given character activate this transition.
 @param character A character.
 @return <TT>true<TT> if the given character activate this transition,
 <TT>false</TT> otherwise.]]>
      </doc>
    </method>
    <method name="substract"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="characters" type="char[]"/>
      <doc>
      <![CDATA[Removes the given characters to the ones activating this transition.
 @param characters Characters to be removed from the ones activating this
 transition.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This class defines transitions between states that are used for defining
 finale state automatas.
 A transition can then be added to one and only one state.]]>
    </doc>
  </class>
  <!-- end class scanner.Transition -->
</package>

</api>
